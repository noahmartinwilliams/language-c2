Failed to parse allop.c
with message:
Syntax error !The symbol `test1sf' does not fit here. ("allop.c": line 53)
/* No Input */
Working dir: /home/noah/src/package-sources/language-c/test/harness/parse_dg
Preprocessed input follows:

# 1 "allop.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "allop.c"
# 15 "allop.c"
void true();
void false();
# 53 "allop.c"
short _Fract test1sf (short _Fract a) { return +a; } short _Fract test2sf (short _Fract a) { return -a; } int test3sf (short _Fract a) { return !a; } short _Fract test4sf (short _Fract a, short _Fract b) { return a + b; } short _Fract test5sf (short _Fract a, short _Fract b) { return a - b; } short _Fract test6sf (short _Fract a, short _Fract b) { return a * b; } short _Fract test7sf (short _Fract a, short _Fract b) { return a / b; } short _Fract test8sf (short _Fract a, short _Fract b) { a += b; return a; } short _Fract test9sf (short _Fract a, short _Fract b) { a -= b; return a; } short _Fract test10sf (short _Fract a, short _Fract b) { a *= b; return a; } short _Fract test11sf (short _Fract a, short _Fract b) { a /= b; return a; } short _Fract test12sf (short _Fract a, int b) { return a << b; } short _Fract test13sf (short _Fract a, int b) { return a >> b; } short _Fract test14sf (short _Fract a, int b) { a <<= b; return a; } short _Fract test15sf (short _Fract a, int b) { a >>= b; return a; } int test16sf (short _Fract a, short _Fract b) { return a == b; } int test17sf (short _Fract a, short _Fract b) { return a != b; } int test18sf (short _Fract a, short _Fract b) { return a < b; } int test19sf (short _Fract a, short _Fract b) { return a <= b; } int test20sf (short _Fract a, short _Fract b) { return a >= b; } int test21sf (short _Fract a, short _Fract b) { return a > b; } void test22sf (short _Fract a, short _Fract b) { if(a == b)true(); else false(); } void test23sf (short _Fract a, short _Fract b) { if(a != b)true(); else false(); } void test24sf (short _Fract a, short _Fract b) { if(a < b)true(); else false(); } void test25sf (short _Fract a, short _Fract b) { if(a <= b)true(); else false(); } void test26sf (short _Fract a, short _Fract b) { if(a >= b)true(); else false(); } void test27sf (short _Fract a, short _Fract b) { if(a > b)true(); else false(); } short _Fract test28sf (short _Fract a) { return ++a; } short _Fract test29sf (short _Fract a) { return --a; } short _Fract test30sf (short _Fract *a) { return ++(*a); } short _Fract test31sf (short _Fract *a) { return (*a)++; } short _Fract test32sf (short _Fract *a) { return --(*a); } short _Fract test33sf (short _Fract *a) { return (*a)--; };
_Fract test1f (_Fract a) { return +a; } _Fract test2f (_Fract a) { return -a; } int test3f (_Fract a) { return !a; } _Fract test4f (_Fract a, _Fract b) { return a + b; } _Fract test5f (_Fract a, _Fract b) { return a - b; } _Fract test6f (_Fract a, _Fract b) { return a * b; } _Fract test7f (_Fract a, _Fract b) { return a / b; } _Fract test8f (_Fract a, _Fract b) { a += b; return a; } _Fract test9f (_Fract a, _Fract b) { a -= b; return a; } _Fract test10f (_Fract a, _Fract b) { a *= b; return a; } _Fract test11f (_Fract a, _Fract b) { a /= b; return a; } _Fract test12f (_Fract a, int b) { return a << b; } _Fract test13f (_Fract a, int b) { return a >> b; } _Fract test14f (_Fract a, int b) { a <<= b; return a; } _Fract test15f (_Fract a, int b) { a >>= b; return a; } int test16f (_Fract a, _Fract b) { return a == b; } int test17f (_Fract a, _Fract b) { return a != b; } int test18f (_Fract a, _Fract b) { return a < b; } int test19f (_Fract a, _Fract b) { return a <= b; } int test20f (_Fract a, _Fract b) { return a >= b; } int test21f (_Fract a, _Fract b) { return a > b; } void test22f (_Fract a, _Fract b) { if(a == b)true(); else false(); } void test23f (_Fract a, _Fract b) { if(a != b)true(); else false(); } void test24f (_Fract a, _Fract b) { if(a < b)true(); else false(); } void test25f (_Fract a, _Fract b) { if(a <= b)true(); else false(); } void test26f (_Fract a, _Fract b) { if(a >= b)true(); else false(); } void test27f (_Fract a, _Fract b) { if(a > b)true(); else false(); } _Fract test28f (_Fract a) { return ++a; } _Fract test29f (_Fract a) { return --a; } _Fract test30f (_Fract *a) { return ++(*a); } _Fract test31f (_Fract *a) { return (*a)++; } _Fract test32f (_Fract *a) { return --(*a); } _Fract test33f (_Fract *a) { return (*a)--; };
long _Fract test1lf (long _Fract a) { return +a; } long _Fract test2lf (long _Fract a) { return -a; } int test3lf (long _Fract a) { return !a; } long _Fract test4lf (long _Fract a, long _Fract b) { return a + b; } long _Fract test5lf (long _Fract a, long _Fract b) { return a - b; } long _Fract test6lf (long _Fract a, long _Fract b) { return a * b; } long _Fract test7lf (long _Fract a, long _Fract b) { return a / b; } long _Fract test8lf (long _Fract a, long _Fract b) { a += b; return a; } long _Fract test9lf (long _Fract a, long _Fract b) { a -= b; return a; } long _Fract test10lf (long _Fract a, long _Fract b) { a *= b; return a; } long _Fract test11lf (long _Fract a, long _Fract b) { a /= b; return a; } long _Fract test12lf (long _Fract a, int b) { return a << b; } long _Fract test13lf (long _Fract a, int b) { return a >> b; } long _Fract test14lf (long _Fract a, int b) { a <<= b; return a; } long _Fract test15lf (long _Fract a, int b) { a >>= b; return a; } int test16lf (long _Fract a, long _Fract b) { return a == b; } int test17lf (long _Fract a, long _Fract b) { return a != b; } int test18lf (long _Fract a, long _Fract b) { return a < b; } int test19lf (long _Fract a, long _Fract b) { return a <= b; } int test20lf (long _Fract a, long _Fract b) { return a >= b; } int test21lf (long _Fract a, long _Fract b) { return a > b; } void test22lf (long _Fract a, long _Fract b) { if(a == b)true(); else false(); } void test23lf (long _Fract a, long _Fract b) { if(a != b)true(); else false(); } void test24lf (long _Fract a, long _Fract b) { if(a < b)true(); else false(); } void test25lf (long _Fract a, long _Fract b) { if(a <= b)true(); else false(); } void test26lf (long _Fract a, long _Fract b) { if(a >= b)true(); else false(); } void test27lf (long _Fract a, long _Fract b) { if(a > b)true(); else false(); } long _Fract test28lf (long _Fract a) { return ++a; } long _Fract test29lf (long _Fract a) { return --a; } long _Fract test30lf (long _Fract *a) { return ++(*a); } long _Fract test31lf (long _Fract *a) { return (*a)++; } long _Fract test32lf (long _Fract *a) { return --(*a); } long _Fract test33lf (long _Fract *a) { return (*a)--; };
long long _Fract test1llf (long long _Fract a) { return +a; } long long _Fract test2llf (long long _Fract a) { return -a; } int test3llf (long long _Fract a) { return !a; } long long _Fract test4llf (long long _Fract a, long long _Fract b) { return a + b; } long long _Fract test5llf (long long _Fract a, long long _Fract b) { return a - b; } long long _Fract test6llf (long long _Fract a, long long _Fract b) { return a * b; } long long _Fract test7llf (long long _Fract a, long long _Fract b) { return a / b; } long long _Fract test8llf (long long _Fract a, long long _Fract b) { a += b; return a; } long long _Fract test9llf (long long _Fract a, long long _Fract b) { a -= b; return a; } long long _Fract test10llf (long long _Fract a, long long _Fract b) { a *= b; return a; } long long _Fract test11llf (long long _Fract a, long long _Fract b) { a /= b; return a; } long long _Fract test12llf (long long _Fract a, int b) { return a << b; } long long _Fract test13llf (long long _Fract a, int b) { return a >> b; } long long _Fract test14llf (long long _Fract a, int b) { a <<= b; return a; } long long _Fract test15llf (long long _Fract a, int b) { a >>= b; return a; } int test16llf (long long _Fract a, long long _Fract b) { return a == b; } int test17llf (long long _Fract a, long long _Fract b) { return a != b; } int test18llf (long long _Fract a, long long _Fract b) { return a < b; } int test19llf (long long _Fract a, long long _Fract b) { return a <= b; } int test20llf (long long _Fract a, long long _Fract b) { return a >= b; } int test21llf (long long _Fract a, long long _Fract b) { return a > b; } void test22llf (long long _Fract a, long long _Fract b) { if(a == b)true(); else false(); } void test23llf (long long _Fract a, long long _Fract b) { if(a != b)true(); else false(); } void test24llf (long long _Fract a, long long _Fract b) { if(a < b)true(); else false(); } void test25llf (long long _Fract a, long long _Fract b) { if(a <= b)true(); else false(); } void test26llf (long long _Fract a, long long _Fract b) { if(a >= b)true(); else false(); } void test27llf (long long _Fract a, long long _Fract b) { if(a > b)true(); else false(); } long long _Fract test28llf (long long _Fract a) { return ++a; } long long _Fract test29llf (long long _Fract a) { return --a; } long long _Fract test30llf (long long _Fract *a) { return ++(*a); } long long _Fract test31llf (long long _Fract *a) { return (*a)++; } long long _Fract test32llf (long long _Fract *a) { return --(*a); } long long _Fract test33llf (long long _Fract *a) { return (*a)--; };
short _Accum test1sa (short _Accum a) { return +a; } short _Accum test2sa (short _Accum a) { return -a; } int test3sa (short _Accum a) { return !a; } short _Accum test4sa (short _Accum a, short _Accum b) { return a + b; } short _Accum test5sa (short _Accum a, short _Accum b) { return a - b; } short _Accum test6sa (short _Accum a, short _Accum b) { return a * b; } short _Accum test7sa (short _Accum a, short _Accum b) { return a / b; } short _Accum test8sa (short _Accum a, short _Accum b) { a += b; return a; } short _Accum test9sa (short _Accum a, short _Accum b) { a -= b; return a; } short _Accum test10sa (short _Accum a, short _Accum b) { a *= b; return a; } short _Accum test11sa (short _Accum a, short _Accum b) { a /= b; return a; } short _Accum test12sa (short _Accum a, int b) { return a << b; } short _Accum test13sa (short _Accum a, int b) { return a >> b; } short _Accum test14sa (short _Accum a, int b) { a <<= b; return a; } short _Accum test15sa (short _Accum a, int b) { a >>= b; return a; } int test16sa (short _Accum a, short _Accum b) { return a == b; } int test17sa (short _Accum a, short _Accum b) { return a != b; } int test18sa (short _Accum a, short _Accum b) { return a < b; } int test19sa (short _Accum a, short _Accum b) { return a <= b; } int test20sa (short _Accum a, short _Accum b) { return a >= b; } int test21sa (short _Accum a, short _Accum b) { return a > b; } void test22sa (short _Accum a, short _Accum b) { if(a == b)true(); else false(); } void test23sa (short _Accum a, short _Accum b) { if(a != b)true(); else false(); } void test24sa (short _Accum a, short _Accum b) { if(a < b)true(); else false(); } void test25sa (short _Accum a, short _Accum b) { if(a <= b)true(); else false(); } void test26sa (short _Accum a, short _Accum b) { if(a >= b)true(); else false(); } void test27sa (short _Accum a, short _Accum b) { if(a > b)true(); else false(); } short _Accum test28sa (short _Accum a) { return ++a; } short _Accum test29sa (short _Accum a) { return --a; } short _Accum test30sa (short _Accum *a) { return ++(*a); } short _Accum test31sa (short _Accum *a) { return (*a)++; } short _Accum test32sa (short _Accum *a) { return --(*a); } short _Accum test33sa (short _Accum *a) { return (*a)--; };
_Accum test1a (_Accum a) { return +a; } _Accum test2a (_Accum a) { return -a; } int test3a (_Accum a) { return !a; } _Accum test4a (_Accum a, _Accum b) { return a + b; } _Accum test5a (_Accum a, _Accum b) { return a - b; } _Accum test6a (_Accum a, _Accum b) { return a * b; } _Accum test7a (_Accum a, _Accum b) { return a / b; } _Accum test8a (_Accum a, _Accum b) { a += b; return a; } _Accum test9a (_Accum a, _Accum b) { a -= b; return a; } _Accum test10a (_Accum a, _Accum b) { a *= b; return a; } _Accum test11a (_Accum a, _Accum b) { a /= b; return a; } _Accum test12a (_Accum a, int b) { return a << b; } _Accum test13a (_Accum a, int b) { return a >> b; } _Accum test14a (_Accum a, int b) { a <<= b; return a; } _Accum test15a (_Accum a, int b) { a >>= b; return a; } int test16a (_Accum a, _Accum b) { return a == b; } int test17a (_Accum a, _Accum b) { return a != b; } int test18a (_Accum a, _Accum b) { return a < b; } int test19a (_Accum a, _Accum b) { return a <= b; } int test20a (_Accum a, _Accum b) { return a >= b; } int test21a (_Accum a, _Accum b) { return a > b; } void test22a (_Accum a, _Accum b) { if(a == b)true(); else false(); } void test23a (_Accum a, _Accum b) { if(a != b)true(); else false(); } void test24a (_Accum a, _Accum b) { if(a < b)true(); else false(); } void test25a (_Accum a, _Accum b) { if(a <= b)true(); else false(); } void test26a (_Accum a, _Accum b) { if(a >= b)true(); else false(); } void test27a (_Accum a, _Accum b) { if(a > b)true(); else false(); } _Accum test28a (_Accum a) { return ++a; } _Accum test29a (_Accum a) { return --a; } _Accum test30a (_Accum *a) { return ++(*a); } _Accum test31a (_Accum *a) { return (*a)++; } _Accum test32a (_Accum *a) { return --(*a); } _Accum test33a (_Accum *a) { return (*a)--; };
long _Accum test1la (long _Accum a) { return +a; } long _Accum test2la (long _Accum a) { return -a; } int test3la (long _Accum a) { return !a; } long _Accum test4la (long _Accum a, long _Accum b) { return a + b; } long _Accum test5la (long _Accum a, long _Accum b) { return a - b; } long _Accum test6la (long _Accum a, long _Accum b) { return a * b; } long _Accum test7la (long _Accum a, long _Accum b) { return a / b; } long _Accum test8la (long _Accum a, long _Accum b) { a += b; return a; } long _Accum test9la (long _Accum a, long _Accum b) { a -= b; return a; } long _Accum test10la (long _Accum a, long _Accum b) { a *= b; return a; } long _Accum test11la (long _Accum a, long _Accum b) { a /= b; return a; } long _Accum test12la (long _Accum a, int b) { return a << b; } long _Accum test13la (long _Accum a, int b) { return a >> b; } long _Accum test14la (long _Accum a, int b) { a <<= b; return a; } long _Accum test15la (long _Accum a, int b) { a >>= b; return a; } int test16la (long _Accum a, long _Accum b) { return a == b; } int test17la (long _Accum a, long _Accum b) { return a != b; } int test18la (long _Accum a, long _Accum b) { return a < b; } int test19la (long _Accum a, long _Accum b) { return a <= b; } int test20la (long _Accum a, long _Accum b) { return a >= b; } int test21la (long _Accum a, long _Accum b) { return a > b; } void test22la (long _Accum a, long _Accum b) { if(a == b)true(); else false(); } void test23la (long _Accum a, long _Accum b) { if(a != b)true(); else false(); } void test24la (long _Accum a, long _Accum b) { if(a < b)true(); else false(); } void test25la (long _Accum a, long _Accum b) { if(a <= b)true(); else false(); } void test26la (long _Accum a, long _Accum b) { if(a >= b)true(); else false(); } void test27la (long _Accum a, long _Accum b) { if(a > b)true(); else false(); } long _Accum test28la (long _Accum a) { return ++a; } long _Accum test29la (long _Accum a) { return --a; } long _Accum test30la (long _Accum *a) { return ++(*a); } long _Accum test31la (long _Accum *a) { return (*a)++; } long _Accum test32la (long _Accum *a) { return --(*a); } long _Accum test33la (long _Accum *a) { return (*a)--; };
long long _Accum test1lla (long long _Accum a) { return +a; } long long _Accum test2lla (long long _Accum a) { return -a; } int test3lla (long long _Accum a) { return !a; } long long _Accum test4lla (long long _Accum a, long long _Accum b) { return a + b; } long long _Accum test5lla (long long _Accum a, long long _Accum b) { return a - b; } long long _Accum test6lla (long long _Accum a, long long _Accum b) { return a * b; } long long _Accum test7lla (long long _Accum a, long long _Accum b) { return a / b; } long long _Accum test8lla (long long _Accum a, long long _Accum b) { a += b; return a; } long long _Accum test9lla (long long _Accum a, long long _Accum b) { a -= b; return a; } long long _Accum test10lla (long long _Accum a, long long _Accum b) { a *= b; return a; } long long _Accum test11lla (long long _Accum a, long long _Accum b) { a /= b; return a; } long long _Accum test12lla (long long _Accum a, int b) { return a << b; } long long _Accum test13lla (long long _Accum a, int b) { return a >> b; } long long _Accum test14lla (long long _Accum a, int b) { a <<= b; return a; } long long _Accum test15lla (long long _Accum a, int b) { a >>= b; return a; } int test16lla (long long _Accum a, long long _Accum b) { return a == b; } int test17lla (long long _Accum a, long long _Accum b) { return a != b; } int test18lla (long long _Accum a, long long _Accum b) { return a < b; } int test19lla (long long _Accum a, long long _Accum b) { return a <= b; } int test20lla (long long _Accum a, long long _Accum b) { return a >= b; } int test21lla (long long _Accum a, long long _Accum b) { return a > b; } void test22lla (long long _Accum a, long long _Accum b) { if(a == b)true(); else false(); } void test23lla (long long _Accum a, long long _Accum b) { if(a != b)true(); else false(); } void test24lla (long long _Accum a, long long _Accum b) { if(a < b)true(); else false(); } void test25lla (long long _Accum a, long long _Accum b) { if(a <= b)true(); else false(); } void test26lla (long long _Accum a, long long _Accum b) { if(a >= b)true(); else false(); } void test27lla (long long _Accum a, long long _Accum b) { if(a > b)true(); else false(); } long long _Accum test28lla (long long _Accum a) { return ++a; } long long _Accum test29lla (long long _Accum a) { return --a; } long long _Accum test30lla (long long _Accum *a) { return ++(*a); } long long _Accum test31lla (long long _Accum *a) { return (*a)++; } long long _Accum test32lla (long long _Accum *a) { return --(*a); } long long _Accum test33lla (long long _Accum *a) { return (*a)--; };

unsigned short _Fract test1usf (unsigned short _Fract a) { return +a; } unsigned short _Fract test2usf (unsigned short _Fract a) { return -a; } int test3usf (unsigned short _Fract a) { return !a; } unsigned short _Fract test4usf (unsigned short _Fract a, unsigned short _Fract b) { return a + b; } unsigned short _Fract test5usf (unsigned short _Fract a, unsigned short _Fract b) { return a - b; } unsigned short _Fract test6usf (unsigned short _Fract a, unsigned short _Fract b) { return a * b; } unsigned short _Fract test7usf (unsigned short _Fract a, unsigned short _Fract b) { return a / b; } unsigned short _Fract test8usf (unsigned short _Fract a, unsigned short _Fract b) { a += b; return a; } unsigned short _Fract test9usf (unsigned short _Fract a, unsigned short _Fract b) { a -= b; return a; } unsigned short _Fract test10usf (unsigned short _Fract a, unsigned short _Fract b) { a *= b; return a; } unsigned short _Fract test11usf (unsigned short _Fract a, unsigned short _Fract b) { a /= b; return a; } unsigned short _Fract test12usf (unsigned short _Fract a, int b) { return a << b; } unsigned short _Fract test13usf (unsigned short _Fract a, int b) { return a >> b; } unsigned short _Fract test14usf (unsigned short _Fract a, int b) { a <<= b; return a; } unsigned short _Fract test15usf (unsigned short _Fract a, int b) { a >>= b; return a; } int test16usf (unsigned short _Fract a, unsigned short _Fract b) { return a == b; } int test17usf (unsigned short _Fract a, unsigned short _Fract b) { return a != b; } int test18usf (unsigned short _Fract a, unsigned short _Fract b) { return a < b; } int test19usf (unsigned short _Fract a, unsigned short _Fract b) { return a <= b; } int test20usf (unsigned short _Fract a, unsigned short _Fract b) { return a >= b; } int test21usf (unsigned short _Fract a, unsigned short _Fract b) { return a > b; } void test22usf (unsigned short _Fract a, unsigned short _Fract b) { if(a == b)true(); else false(); } void test23usf (unsigned short _Fract a, unsigned short _Fract b) { if(a != b)true(); else false(); } void test24usf (unsigned short _Fract a, unsigned short _Fract b) { if(a < b)true(); else false(); } void test25usf (unsigned short _Fract a, unsigned short _Fract b) { if(a <= b)true(); else false(); } void test26usf (unsigned short _Fract a, unsigned short _Fract b) { if(a >= b)true(); else false(); } void test27usf (unsigned short _Fract a, unsigned short _Fract b) { if(a > b)true(); else false(); } unsigned short _Fract test28usf (unsigned short _Fract a) { return ++a; } unsigned short _Fract test29usf (unsigned short _Fract a) { return --a; } unsigned short _Fract test30usf (unsigned short _Fract *a) { return ++(*a); } unsigned short _Fract test31usf (unsigned short _Fract *a) { return (*a)++; } unsigned short _Fract test32usf (unsigned short _Fract *a) { return --(*a); } unsigned short _Fract test33usf (unsigned short _Fract *a) { return (*a)--; };
unsigned _Fract test1uf (unsigned _Fract a) { return +a; } unsigned _Fract test2uf (unsigned _Fract a) { return -a; } int test3uf (unsigned _Fract a) { return !a; } unsigned _Fract test4uf (unsigned _Fract a, unsigned _Fract b) { return a + b; } unsigned _Fract test5uf (unsigned _Fract a, unsigned _Fract b) { return a - b; } unsigned _Fract test6uf (unsigned _Fract a, unsigned _Fract b) { return a * b; } unsigned _Fract test7uf (unsigned _Fract a, unsigned _Fract b) { return a / b; } unsigned _Fract test8uf (unsigned _Fract a, unsigned _Fract b) { a += b; return a; } unsigned _Fract test9uf (unsigned _Fract a, unsigned _Fract b) { a -= b; return a; } unsigned _Fract test10uf (unsigned _Fract a, unsigned _Fract b) { a *= b; return a; } unsigned _Fract test11uf (unsigned _Fract a, unsigned _Fract b) { a /= b; return a; } unsigned _Fract test12uf (unsigned _Fract a, int b) { return a << b; } unsigned _Fract test13uf (unsigned _Fract a, int b) { return a >> b; } unsigned _Fract test14uf (unsigned _Fract a, int b) { a <<= b; return a; } unsigned _Fract test15uf (unsigned _Fract a, int b) { a >>= b; return a; } int test16uf (unsigned _Fract a, unsigned _Fract b) { return a == b; } int test17uf (unsigned _Fract a, unsigned _Fract b) { return a != b; } int test18uf (unsigned _Fract a, unsigned _Fract b) { return a < b; } int test19uf (unsigned _Fract a, unsigned _Fract b) { return a <= b; } int test20uf (unsigned _Fract a, unsigned _Fract b) { return a >= b; } int test21uf (unsigned _Fract a, unsigned _Fract b) { return a > b; } void test22uf (unsigned _Fract a, unsigned _Fract b) { if(a == b)true(); else false(); } void test23uf (unsigned _Fract a, unsigned _Fract b) { if(a != b)true(); else false(); } void test24uf (unsigned _Fract a, unsigned _Fract b) { if(a < b)true(); else false(); } void test25uf (unsigned _Fract a, unsigned _Fract b) { if(a <= b)true(); else false(); } void test26uf (unsigned _Fract a, unsigned _Fract b) { if(a >= b)true(); else false(); } void test27uf (unsigned _Fract a, unsigned _Fract b) { if(a > b)true(); else false(); } unsigned _Fract test28uf (unsigned _Fract a) { return ++a; } unsigned _Fract test29uf (unsigned _Fract a) { return --a; } unsigned _Fract test30uf (unsigned _Fract *a) { return ++(*a); } unsigned _Fract test31uf (unsigned _Fract *a) { return (*a)++; } unsigned _Fract test32uf (unsigned _Fract *a) { return --(*a); } unsigned _Fract test33uf (unsigned _Fract *a) { return (*a)--; };
unsigned long _Fract test1ulf (unsigned long _Fract a) { return +a; } unsigned long _Fract test2ulf (unsigned long _Fract a) { return -a; } int test3ulf (unsigned long _Fract a) { return !a; } unsigned long _Fract test4ulf (unsigned long _Fract a, unsigned long _Fract b) { return a + b; } unsigned long _Fract test5ulf (unsigned long _Fract a, unsigned long _Fract b) { return a - b; } unsigned long _Fract test6ulf (unsigned long _Fract a, unsigned long _Fract b) { return a * b; } unsigned long _Fract test7ulf (unsigned long _Fract a, unsigned long _Fract b) { return a / b; } unsigned long _Fract test8ulf (unsigned long _Fract a, unsigned long _Fract b) { a += b; return a; } unsigned long _Fract test9ulf (unsigned long _Fract a, unsigned long _Fract b) { a -= b; return a; } unsigned long _Fract test10ulf (unsigned long _Fract a, unsigned long _Fract b) { a *= b; return a; } unsigned long _Fract test11ulf (unsigned long _Fract a, unsigned long _Fract b) { a /= b; return a; } unsigned long _Fract test12ulf (unsigned long _Fract a, int b) { return a << b; } unsigned long _Fract test13ulf (unsigned long _Fract a, int b) { return a >> b; } unsigned long _Fract test14ulf (unsigned long _Fract a, int b) { a <<= b; return a; } unsigned long _Fract test15ulf (unsigned long _Fract a, int b) { a >>= b; return a; } int test16ulf (unsigned long _Fract a, unsigned long _Fract b) { return a == b; } int test17ulf (unsigned long _Fract a, unsigned long _Fract b) { return a != b; } int test18ulf (unsigned long _Fract a, unsigned long _Fract b) { return a < b; } int test19ulf (unsigned long _Fract a, unsigned long _Fract b) { return a <= b; } int test20ulf (unsigned long _Fract a, unsigned long _Fract b) { return a >= b; } int test21ulf (unsigned long _Fract a, unsigned long _Fract b) { return a > b; } void test22ulf (unsigned long _Fract a, unsigned long _Fract b) { if(a == b)true(); else false(); } void test23ulf (unsigned long _Fract a, unsigned long _Fract b) { if(a != b)true(); else false(); } void test24ulf (unsigned long _Fract a, unsigned long _Fract b) { if(a < b)true(); else false(); } void test25ulf (unsigned long _Fract a, unsigned long _Fract b) { if(a <= b)true(); else false(); } void test26ulf (unsigned long _Fract a, unsigned long _Fract b) { if(a >= b)true(); else false(); } void test27ulf (unsigned long _Fract a, unsigned long _Fract b) { if(a > b)true(); else false(); } unsigned long _Fract test28ulf (unsigned long _Fract a) { return ++a; } unsigned long _Fract test29ulf (unsigned long _Fract a) { return --a; } unsigned long _Fract test30ulf (unsigned long _Fract *a) { return ++(*a); } unsigned long _Fract test31ulf (unsigned long _Fract *a) { return (*a)++; } unsigned long _Fract test32ulf (unsigned long _Fract *a) { return --(*a); } unsigned long _Fract test33ulf (unsigned long _Fract *a) { return (*a)--; };
unsigned long long _Fract test1ullf (unsigned long long _Fract a) { return +a; } unsigned long long _Fract test2ullf (unsigned long long _Fract a) { return -a; } int test3ullf (unsigned long long _Fract a) { return !a; } unsigned long long _Fract test4ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a + b; } unsigned long long _Fract test5ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a - b; } unsigned long long _Fract test6ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a * b; } unsigned long long _Fract test7ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a / b; } unsigned long long _Fract test8ullf (unsigned long long _Fract a, unsigned long long _Fract b) { a += b; return a; } unsigned long long _Fract test9ullf (unsigned long long _Fract a, unsigned long long _Fract b) { a -= b; return a; } unsigned long long _Fract test10ullf (unsigned long long _Fract a, unsigned long long _Fract b) { a *= b; return a; } unsigned long long _Fract test11ullf (unsigned long long _Fract a, unsigned long long _Fract b) { a /= b; return a; } unsigned long long _Fract test12ullf (unsigned long long _Fract a, int b) { return a << b; } unsigned long long _Fract test13ullf (unsigned long long _Fract a, int b) { return a >> b; } unsigned long long _Fract test14ullf (unsigned long long _Fract a, int b) { a <<= b; return a; } unsigned long long _Fract test15ullf (unsigned long long _Fract a, int b) { a >>= b; return a; } int test16ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a == b; } int test17ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a != b; } int test18ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a < b; } int test19ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a <= b; } int test20ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a >= b; } int test21ullf (unsigned long long _Fract a, unsigned long long _Fract b) { return a > b; } void test22ullf (unsigned long long _Fract a, unsigned long long _Fract b) { if(a == b)true(); else false(); } void test23ullf (unsigned long long _Fract a, unsigned long long _Fract b) { if(a != b)true(); else false(); } void test24ullf (unsigned long long _Fract a, unsigned long long _Fract b) { if(a < b)true(); else false(); } void test25ullf (unsigned long long _Fract a, unsigned long long _Fract b) { if(a <= b)true(); else false(); } void test26ullf (unsigned long long _Fract a, unsigned long long _Fract b) { if(a >= b)true(); else false(); } void test27ullf (unsigned long long _Fract a, unsigned long long _Fract b) { if(a > b)true(); else false(); } unsigned long long _Fract test28ullf (unsigned long long _Fract a) { return ++a; } unsigned long long _Fract test29ullf (unsigned long long _Fract a) { return --a; } unsigned long long _Fract test30ullf (unsigned long long _Fract *a) { return ++(*a); } unsigned long long _Fract test31ullf (unsigned long long _Fract *a) { return (*a)++; } unsigned long long _Fract test32ullf (unsigned long long _Fract *a) { return --(*a); } unsigned long long _Fract test33ullf (unsigned long long _Fract *a) { return (*a)--; };
unsigned short _Accum test1usa (unsigned short _Accum a) { return +a; } unsigned short _Accum test2usa (unsigned short _Accum a) { return -a; } int test3usa (unsigned short _Accum a) { return !a; } unsigned short _Accum test4usa (unsigned short _Accum a, unsigned short _Accum b) { return a + b; } unsigned short _Accum test5usa (unsigned short _Accum a, unsigned short _Accum b) { return a - b; } unsigned short _Accum test6usa (unsigned short _Accum a, unsigned short _Accum b) { return a * b; } unsigned short _Accum test7usa (unsigned short _Accum a, unsigned short _Accum b) { return a / b; } unsigned short _Accum test8usa (unsigned short _Accum a, unsigned short _Accum b) { a += b; return a; } unsigned short _Accum test9usa (unsigned short _Accum a, unsigned short _Accum b) { a -= b; return a; } unsigned short _Accum test10usa (unsigned short _Accum a, unsigned short _Accum b) { a *= b; return a; } unsigned short _Accum test11usa (unsigned short _Accum a, unsigned short _Accum b) { a /= b; return a; } unsigned short _Accum test12usa (unsigned short _Accum a, int b) { return a << b; } unsigned short _Accum test13usa (unsigned short _Accum a, int b) { return a >> b; } unsigned short _Accum test14usa (unsigned short _Accum a, int b) { a <<= b; return a; } unsigned short _Accum test15usa (unsigned short _Accum a, int b) { a >>= b; return a; } int test16usa (unsigned short _Accum a, unsigned short _Accum b) { return a == b; } int test17usa (unsigned short _Accum a, unsigned short _Accum b) { return a != b; } int test18usa (unsigned short _Accum a, unsigned short _Accum b) { return a < b; } int test19usa (unsigned short _Accum a, unsigned short _Accum b) { return a <= b; } int test20usa (unsigned short _Accum a, unsigned short _Accum b) { return a >= b; } int test21usa (unsigned short _Accum a, unsigned short _Accum b) { return a > b; } void test22usa (unsigned short _Accum a, unsigned short _Accum b) { if(a == b)true(); else false(); } void test23usa (unsigned short _Accum a, unsigned short _Accum b) { if(a != b)true(); else false(); } void test24usa (unsigned short _Accum a, unsigned short _Accum b) { if(a < b)true(); else false(); } void test25usa (unsigned short _Accum a, unsigned short _Accum b) { if(a <= b)true(); else false(); } void test26usa (unsigned short _Accum a, unsigned short _Accum b) { if(a >= b)true(); else false(); } void test27usa (unsigned short _Accum a, unsigned short _Accum b) { if(a > b)true(); else false(); } unsigned short _Accum test28usa (unsigned short _Accum a) { return ++a; } unsigned short _Accum test29usa (unsigned short _Accum a) { return --a; } unsigned short _Accum test30usa (unsigned short _Accum *a) { return ++(*a); } unsigned short _Accum test31usa (unsigned short _Accum *a) { return (*a)++; } unsigned short _Accum test32usa (unsigned short _Accum *a) { return --(*a); } unsigned short _Accum test33usa (unsigned short _Accum *a) { return (*a)--; };
unsigned _Accum test1ua (unsigned _Accum a) { return +a; } unsigned _Accum test2ua (unsigned _Accum a) { return -a; } int test3ua (unsigned _Accum a) { return !a; } unsigned _Accum test4ua (unsigned _Accum a, unsigned _Accum b) { return a + b; } unsigned _Accum test5ua (unsigned _Accum a, unsigned _Accum b) { return a - b; } unsigned _Accum test6ua (unsigned _Accum a, unsigned _Accum b) { return a * b; } unsigned _Accum test7ua (unsigned _Accum a, unsigned _Accum b) { return a / b; } unsigned _Accum test8ua (unsigned _Accum a, unsigned _Accum b) { a += b; return a; } unsigned _Accum test9ua (unsigned _Accum a, unsigned _Accum b) { a -= b; return a; } unsigned _Accum test10ua (unsigned _Accum a, unsigned _Accum b) { a *= b; return a; } unsigned _Accum test11ua (unsigned _Accum a, unsigned _Accum b) { a /= b; return a; } unsigned _Accum test12ua (unsigned _Accum a, int b) { return a << b; } unsigned _Accum test13ua (unsigned _Accum a, int b) { return a >> b; } unsigned _Accum test14ua (unsigned _Accum a, int b) { a <<= b; return a; } unsigned _Accum test15ua (unsigned _Accum a, int b) { a >>= b; return a; } int test16ua (unsigned _Accum a, unsigned _Accum b) { return a == b; } int test17ua (unsigned _Accum a, unsigned _Accum b) { return a != b; } int test18ua (unsigned _Accum a, unsigned _Accum b) { return a < b; } int test19ua (unsigned _Accum a, unsigned _Accum b) { return a <= b; } int test20ua (unsigned _Accum a, unsigned _Accum b) { return a >= b; } int test21ua (unsigned _Accum a, unsigned _Accum b) { return a > b; } void test22ua (unsigned _Accum a, unsigned _Accum b) { if(a == b)true(); else false(); } void test23ua (unsigned _Accum a, unsigned _Accum b) { if(a != b)true(); else false(); } void test24ua (unsigned _Accum a, unsigned _Accum b) { if(a < b)true(); else false(); } void test25ua (unsigned _Accum a, unsigned _Accum b) { if(a <= b)true(); else false(); } void test26ua (unsigned _Accum a, unsigned _Accum b) { if(a >= b)true(); else false(); } void test27ua (unsigned _Accum a, unsigned _Accum b) { if(a > b)true(); else false(); } unsigned _Accum test28ua (unsigned _Accum a) { return ++a; } unsigned _Accum test29ua (unsigned _Accum a) { return --a; } unsigned _Accum test30ua (unsigned _Accum *a) { return ++(*a); } unsigned _Accum test31ua (unsigned _Accum *a) { return (*a)++; } unsigned _Accum test32ua (unsigned _Accum *a) { return --(*a); } unsigned _Accum test33ua (unsigned _Accum *a) { return (*a)--; };
unsigned long _Accum test1ula (unsigned long _Accum a) { return +a; } unsigned long _Accum test2ula (unsigned long _Accum a) { return -a; } int test3ula (unsigned long _Accum a) { return !a; } unsigned long _Accum test4ula (unsigned long _Accum a, unsigned long _Accum b) { return a + b; } unsigned long _Accum test5ula (unsigned long _Accum a, unsigned long _Accum b) { return a - b; } unsigned long _Accum test6ula (unsigned long _Accum a, unsigned long _Accum b) { return a * b; } unsigned long _Accum test7ula (unsigned long _Accum a, unsigned long _Accum b) { return a / b; } unsigned long _Accum test8ula (unsigned long _Accum a, unsigned long _Accum b) { a += b; return a; } unsigned long _Accum test9ula (unsigned long _Accum a, unsigned long _Accum b) { a -= b; return a; } unsigned long _Accum test10ula (unsigned long _Accum a, unsigned long _Accum b) { a *= b; return a; } unsigned long _Accum test11ula (unsigned long _Accum a, unsigned long _Accum b) { a /= b; return a; } unsigned long _Accum test12ula (unsigned long _Accum a, int b) { return a << b; } unsigned long _Accum test13ula (unsigned long _Accum a, int b) { return a >> b; } unsigned long _Accum test14ula (unsigned long _Accum a, int b) { a <<= b; return a; } unsigned long _Accum test15ula (unsigned long _Accum a, int b) { a >>= b; return a; } int test16ula (unsigned long _Accum a, unsigned long _Accum b) { return a == b; } int test17ula (unsigned long _Accum a, unsigned long _Accum b) { return a != b; } int test18ula (unsigned long _Accum a, unsigned long _Accum b) { return a < b; } int test19ula (unsigned long _Accum a, unsigned long _Accum b) { return a <= b; } int test20ula (unsigned long _Accum a, unsigned long _Accum b) { return a >= b; } int test21ula (unsigned long _Accum a, unsigned long _Accum b) { return a > b; } void test22ula (unsigned long _Accum a, unsigned long _Accum b) { if(a == b)true(); else false(); } void test23ula (unsigned long _Accum a, unsigned long _Accum b) { if(a != b)true(); else false(); } void test24ula (unsigned long _Accum a, unsigned long _Accum b) { if(a < b)true(); else false(); } void test25ula (unsigned long _Accum a, unsigned long _Accum b) { if(a <= b)true(); else false(); } void test26ula (unsigned long _Accum a, unsigned long _Accum b) { if(a >= b)true(); else false(); } void test27ula (unsigned long _Accum a, unsigned long _Accum b) { if(a > b)true(); else false(); } unsigned long _Accum test28ula (unsigned long _Accum a) { return ++a; } unsigned long _Accum test29ula (unsigned long _Accum a) { return --a; } unsigned long _Accum test30ula (unsigned long _Accum *a) { return ++(*a); } unsigned long _Accum test31ula (unsigned long _Accum *a) { return (*a)++; } unsigned long _Accum test32ula (unsigned long _Accum *a) { return --(*a); } unsigned long _Accum test33ula (unsigned long _Accum *a) { return (*a)--; };
unsigned long long _Accum test1ulla (unsigned long long _Accum a) { return +a; } unsigned long long _Accum test2ulla (unsigned long long _Accum a) { return -a; } int test3ulla (unsigned long long _Accum a) { return !a; } unsigned long long _Accum test4ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a + b; } unsigned long long _Accum test5ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a - b; } unsigned long long _Accum test6ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a * b; } unsigned long long _Accum test7ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a / b; } unsigned long long _Accum test8ulla (unsigned long long _Accum a, unsigned long long _Accum b) { a += b; return a; } unsigned long long _Accum test9ulla (unsigned long long _Accum a, unsigned long long _Accum b) { a -= b; return a; } unsigned long long _Accum test10ulla (unsigned long long _Accum a, unsigned long long _Accum b) { a *= b; return a; } unsigned long long _Accum test11ulla (unsigned long long _Accum a, unsigned long long _Accum b) { a /= b; return a; } unsigned long long _Accum test12ulla (unsigned long long _Accum a, int b) { return a << b; } unsigned long long _Accum test13ulla (unsigned long long _Accum a, int b) { return a >> b; } unsigned long long _Accum test14ulla (unsigned long long _Accum a, int b) { a <<= b; return a; } unsigned long long _Accum test15ulla (unsigned long long _Accum a, int b) { a >>= b; return a; } int test16ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a == b; } int test17ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a != b; } int test18ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a < b; } int test19ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a <= b; } int test20ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a >= b; } int test21ulla (unsigned long long _Accum a, unsigned long long _Accum b) { return a > b; } void test22ulla (unsigned long long _Accum a, unsigned long long _Accum b) { if(a == b)true(); else false(); } void test23ulla (unsigned long long _Accum a, unsigned long long _Accum b) { if(a != b)true(); else false(); } void test24ulla (unsigned long long _Accum a, unsigned long long _Accum b) { if(a < b)true(); else false(); } void test25ulla (unsigned long long _Accum a, unsigned long long _Accum b) { if(a <= b)true(); else false(); } void test26ulla (unsigned long long _Accum a, unsigned long long _Accum b) { if(a >= b)true(); else false(); } void test27ulla (unsigned long long _Accum a, unsigned long long _Accum b) { if(a > b)true(); else false(); } unsigned long long _Accum test28ulla (unsigned long long _Accum a) { return ++a; } unsigned long long _Accum test29ulla (unsigned long long _Accum a) { return --a; } unsigned long long _Accum test30ulla (unsigned long long _Accum *a) { return ++(*a); } unsigned long long _Accum test31ulla (unsigned long long _Accum *a) { return (*a)++; } unsigned long long _Accum test32ulla (unsigned long long _Accum *a) { return --(*a); } unsigned long long _Accum test33ulla (unsigned long long _Accum *a) { return (*a)--; };

_Sat short _Fract test1Ssf (_Sat short _Fract a) { return +a; } _Sat short _Fract test2Ssf (_Sat short _Fract a) { return -a; } int test3Ssf (_Sat short _Fract a) { return !a; } _Sat short _Fract test4Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a + b; } _Sat short _Fract test5Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a - b; } _Sat short _Fract test6Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a * b; } _Sat short _Fract test7Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a / b; } _Sat short _Fract test8Ssf (_Sat short _Fract a, _Sat short _Fract b) { a += b; return a; } _Sat short _Fract test9Ssf (_Sat short _Fract a, _Sat short _Fract b) { a -= b; return a; } _Sat short _Fract test10Ssf (_Sat short _Fract a, _Sat short _Fract b) { a *= b; return a; } _Sat short _Fract test11Ssf (_Sat short _Fract a, _Sat short _Fract b) { a /= b; return a; } _Sat short _Fract test12Ssf (_Sat short _Fract a, int b) { return a << b; } _Sat short _Fract test13Ssf (_Sat short _Fract a, int b) { return a >> b; } _Sat short _Fract test14Ssf (_Sat short _Fract a, int b) { a <<= b; return a; } _Sat short _Fract test15Ssf (_Sat short _Fract a, int b) { a >>= b; return a; } int test16Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a == b; } int test17Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a != b; } int test18Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a < b; } int test19Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a <= b; } int test20Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a >= b; } int test21Ssf (_Sat short _Fract a, _Sat short _Fract b) { return a > b; } void test22Ssf (_Sat short _Fract a, _Sat short _Fract b) { if(a == b)true(); else false(); } void test23Ssf (_Sat short _Fract a, _Sat short _Fract b) { if(a != b)true(); else false(); } void test24Ssf (_Sat short _Fract a, _Sat short _Fract b) { if(a < b)true(); else false(); } void test25Ssf (_Sat short _Fract a, _Sat short _Fract b) { if(a <= b)true(); else false(); } void test26Ssf (_Sat short _Fract a, _Sat short _Fract b) { if(a >= b)true(); else false(); } void test27Ssf (_Sat short _Fract a, _Sat short _Fract b) { if(a > b)true(); else false(); } _Sat short _Fract test28Ssf (_Sat short _Fract a) { return ++a; } _Sat short _Fract test29Ssf (_Sat short _Fract a) { return --a; } _Sat short _Fract test30Ssf (_Sat short _Fract *a) { return ++(*a); } _Sat short _Fract test31Ssf (_Sat short _Fract *a) { return (*a)++; } _Sat short _Fract test32Ssf (_Sat short _Fract *a) { return --(*a); } _Sat short _Fract test33Ssf (_Sat short _Fract *a) { return (*a)--; };
_Sat _Fract test1Sf (_Sat _Fract a) { return +a; } _Sat _Fract test2Sf (_Sat _Fract a) { return -a; } int test3Sf (_Sat _Fract a) { return !a; } _Sat _Fract test4Sf (_Sat _Fract a, _Sat _Fract b) { return a + b; } _Sat _Fract test5Sf (_Sat _Fract a, _Sat _Fract b) { return a - b; } _Sat _Fract test6Sf (_Sat _Fract a, _Sat _Fract b) { return a * b; } _Sat _Fract test7Sf (_Sat _Fract a, _Sat _Fract b) { return a / b; } _Sat _Fract test8Sf (_Sat _Fract a, _Sat _Fract b) { a += b; return a; } _Sat _Fract test9Sf (_Sat _Fract a, _Sat _Fract b) { a -= b; return a; } _Sat _Fract test10Sf (_Sat _Fract a, _Sat _Fract b) { a *= b; return a; } _Sat _Fract test11Sf (_Sat _Fract a, _Sat _Fract b) { a /= b; return a; } _Sat _Fract test12Sf (_Sat _Fract a, int b) { return a << b; } _Sat _Fract test13Sf (_Sat _Fract a, int b) { return a >> b; } _Sat _Fract test14Sf (_Sat _Fract a, int b) { a <<= b; return a; } _Sat _Fract test15Sf (_Sat _Fract a, int b) { a >>= b; return a; } int test16Sf (_Sat _Fract a, _Sat _Fract b) { return a == b; } int test17Sf (_Sat _Fract a, _Sat _Fract b) { return a != b; } int test18Sf (_Sat _Fract a, _Sat _Fract b) { return a < b; } int test19Sf (_Sat _Fract a, _Sat _Fract b) { return a <= b; } int test20Sf (_Sat _Fract a, _Sat _Fract b) { return a >= b; } int test21Sf (_Sat _Fract a, _Sat _Fract b) { return a > b; } void test22Sf (_Sat _Fract a, _Sat _Fract b) { if(a == b)true(); else false(); } void test23Sf (_Sat _Fract a, _Sat _Fract b) { if(a != b)true(); else false(); } void test24Sf (_Sat _Fract a, _Sat _Fract b) { if(a < b)true(); else false(); } void test25Sf (_Sat _Fract a, _Sat _Fract b) { if(a <= b)true(); else false(); } void test26Sf (_Sat _Fract a, _Sat _Fract b) { if(a >= b)true(); else false(); } void test27Sf (_Sat _Fract a, _Sat _Fract b) { if(a > b)true(); else false(); } _Sat _Fract test28Sf (_Sat _Fract a) { return ++a; } _Sat _Fract test29Sf (_Sat _Fract a) { return --a; } _Sat _Fract test30Sf (_Sat _Fract *a) { return ++(*a); } _Sat _Fract test31Sf (_Sat _Fract *a) { return (*a)++; } _Sat _Fract test32Sf (_Sat _Fract *a) { return --(*a); } _Sat _Fract test33Sf (_Sat _Fract *a) { return (*a)--; };
_Sat long _Fract test1Slf (_Sat long _Fract a) { return +a; } _Sat long _Fract test2Slf (_Sat long _Fract a) { return -a; } int test3Slf (_Sat long _Fract a) { return !a; } _Sat long _Fract test4Slf (_Sat long _Fract a, _Sat long _Fract b) { return a + b; } _Sat long _Fract test5Slf (_Sat long _Fract a, _Sat long _Fract b) { return a - b; } _Sat long _Fract test6Slf (_Sat long _Fract a, _Sat long _Fract b) { return a * b; } _Sat long _Fract test7Slf (_Sat long _Fract a, _Sat long _Fract b) { return a / b; } _Sat long _Fract test8Slf (_Sat long _Fract a, _Sat long _Fract b) { a += b; return a; } _Sat long _Fract test9Slf (_Sat long _Fract a, _Sat long _Fract b) { a -= b; return a; } _Sat long _Fract test10Slf (_Sat long _Fract a, _Sat long _Fract b) { a *= b; return a; } _Sat long _Fract test11Slf (_Sat long _Fract a, _Sat long _Fract b) { a /= b; return a; } _Sat long _Fract test12Slf (_Sat long _Fract a, int b) { return a << b; } _Sat long _Fract test13Slf (_Sat long _Fract a, int b) { return a >> b; } _Sat long _Fract test14Slf (_Sat long _Fract a, int b) { a <<= b; return a; } _Sat long _Fract test15Slf (_Sat long _Fract a, int b) { a >>= b; return a; } int test16Slf (_Sat long _Fract a, _Sat long _Fract b) { return a == b; } int test17Slf (_Sat long _Fract a, _Sat long _Fract b) { return a != b; } int test18Slf (_Sat long _Fract a, _Sat long _Fract b) { return a < b; } int test19Slf (_Sat long _Fract a, _Sat long _Fract b) { return a <= b; } int test20Slf (_Sat long _Fract a, _Sat long _Fract b) { return a >= b; } int test21Slf (_Sat long _Fract a, _Sat long _Fract b) { return a > b; } void test22Slf (_Sat long _Fract a, _Sat long _Fract b) { if(a == b)true(); else false(); } void test23Slf (_Sat long _Fract a, _Sat long _Fract b) { if(a != b)true(); else false(); } void test24Slf (_Sat long _Fract a, _Sat long _Fract b) { if(a < b)true(); else false(); } void test25Slf (_Sat long _Fract a, _Sat long _Fract b) { if(a <= b)true(); else false(); } void test26Slf (_Sat long _Fract a, _Sat long _Fract b) { if(a >= b)true(); else false(); } void test27Slf (_Sat long _Fract a, _Sat long _Fract b) { if(a > b)true(); else false(); } _Sat long _Fract test28Slf (_Sat long _Fract a) { return ++a; } _Sat long _Fract test29Slf (_Sat long _Fract a) { return --a; } _Sat long _Fract test30Slf (_Sat long _Fract *a) { return ++(*a); } _Sat long _Fract test31Slf (_Sat long _Fract *a) { return (*a)++; } _Sat long _Fract test32Slf (_Sat long _Fract *a) { return --(*a); } _Sat long _Fract test33Slf (_Sat long _Fract *a) { return (*a)--; };
_Sat long long _Fract test1Sllf (_Sat long long _Fract a) { return +a; } _Sat long long _Fract test2Sllf (_Sat long long _Fract a) { return -a; } int test3Sllf (_Sat long long _Fract a) { return !a; } _Sat long long _Fract test4Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a + b; } _Sat long long _Fract test5Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a - b; } _Sat long long _Fract test6Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a * b; } _Sat long long _Fract test7Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a / b; } _Sat long long _Fract test8Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { a += b; return a; } _Sat long long _Fract test9Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { a -= b; return a; } _Sat long long _Fract test10Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { a *= b; return a; } _Sat long long _Fract test11Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { a /= b; return a; } _Sat long long _Fract test12Sllf (_Sat long long _Fract a, int b) { return a << b; } _Sat long long _Fract test13Sllf (_Sat long long _Fract a, int b) { return a >> b; } _Sat long long _Fract test14Sllf (_Sat long long _Fract a, int b) { a <<= b; return a; } _Sat long long _Fract test15Sllf (_Sat long long _Fract a, int b) { a >>= b; return a; } int test16Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a == b; } int test17Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a != b; } int test18Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a < b; } int test19Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a <= b; } int test20Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a >= b; } int test21Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { return a > b; } void test22Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { if(a == b)true(); else false(); } void test23Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { if(a != b)true(); else false(); } void test24Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { if(a < b)true(); else false(); } void test25Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { if(a <= b)true(); else false(); } void test26Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { if(a >= b)true(); else false(); } void test27Sllf (_Sat long long _Fract a, _Sat long long _Fract b) { if(a > b)true(); else false(); } _Sat long long _Fract test28Sllf (_Sat long long _Fract a) { return ++a; } _Sat long long _Fract test29Sllf (_Sat long long _Fract a) { return --a; } _Sat long long _Fract test30Sllf (_Sat long long _Fract *a) { return ++(*a); } _Sat long long _Fract test31Sllf (_Sat long long _Fract *a) { return (*a)++; } _Sat long long _Fract test32Sllf (_Sat long long _Fract *a) { return --(*a); } _Sat long long _Fract test33Sllf (_Sat long long _Fract *a) { return (*a)--; };
_Sat short _Accum test1Ssa (_Sat short _Accum a) { return +a; } _Sat short _Accum test2Ssa (_Sat short _Accum a) { return -a; } int test3Ssa (_Sat short _Accum a) { return !a; } _Sat short _Accum test4Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a + b; } _Sat short _Accum test5Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a - b; } _Sat short _Accum test6Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a * b; } _Sat short _Accum test7Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a / b; } _Sat short _Accum test8Ssa (_Sat short _Accum a, _Sat short _Accum b) { a += b; return a; } _Sat short _Accum test9Ssa (_Sat short _Accum a, _Sat short _Accum b) { a -= b; return a; } _Sat short _Accum test10Ssa (_Sat short _Accum a, _Sat short _Accum b) { a *= b; return a; } _Sat short _Accum test11Ssa (_Sat short _Accum a, _Sat short _Accum b) { a /= b; return a; } _Sat short _Accum test12Ssa (_Sat short _Accum a, int b) { return a << b; } _Sat short _Accum test13Ssa (_Sat short _Accum a, int b) { return a >> b; } _Sat short _Accum test14Ssa (_Sat short _Accum a, int b) { a <<= b; return a; } _Sat short _Accum test15Ssa (_Sat short _Accum a, int b) { a >>= b; return a; } int test16Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a == b; } int test17Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a != b; } int test18Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a < b; } int test19Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a <= b; } int test20Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a >= b; } int test21Ssa (_Sat short _Accum a, _Sat short _Accum b) { return a > b; } void test22Ssa (_Sat short _Accum a, _Sat short _Accum b) { if(a == b)true(); else false(); } void test23Ssa (_Sat short _Accum a, _Sat short _Accum b) { if(a != b)true(); else false(); } void test24Ssa (_Sat short _Accum a, _Sat short _Accum b) { if(a < b)true(); else false(); } void test25Ssa (_Sat short _Accum a, _Sat short _Accum b) { if(a <= b)true(); else false(); } void test26Ssa (_Sat short _Accum a, _Sat short _Accum b) { if(a >= b)true(); else false(); } void test27Ssa (_Sat short _Accum a, _Sat short _Accum b) { if(a > b)true(); else false(); } _Sat short _Accum test28Ssa (_Sat short _Accum a) { return ++a; } _Sat short _Accum test29Ssa (_Sat short _Accum a) { return --a; } _Sat short _Accum test30Ssa (_Sat short _Accum *a) { return ++(*a); } _Sat short _Accum test31Ssa (_Sat short _Accum *a) { return (*a)++; } _Sat short _Accum test32Ssa (_Sat short _Accum *a) { return --(*a); } _Sat short _Accum test33Ssa (_Sat short _Accum *a) { return (*a)--; };
_Sat _Accum test1Sa (_Sat _Accum a) { return +a; } _Sat _Accum test2Sa (_Sat _Accum a) { return -a; } int test3Sa (_Sat _Accum a) { return !a; } _Sat _Accum test4Sa (_Sat _Accum a, _Sat _Accum b) { return a + b; } _Sat _Accum test5Sa (_Sat _Accum a, _Sat _Accum b) { return a - b; } _Sat _Accum test6Sa (_Sat _Accum a, _Sat _Accum b) { return a * b; } _Sat _Accum test7Sa (_Sat _Accum a, _Sat _Accum b) { return a / b; } _Sat _Accum test8Sa (_Sat _Accum a, _Sat _Accum b) { a += b; return a; } _Sat _Accum test9Sa (_Sat _Accum a, _Sat _Accum b) { a -= b; return a; } _Sat _Accum test10Sa (_Sat _Accum a, _Sat _Accum b) { a *= b; return a; } _Sat _Accum test11Sa (_Sat _Accum a, _Sat _Accum b) { a /= b; return a; } _Sat _Accum test12Sa (_Sat _Accum a, int b) { return a << b; } _Sat _Accum test13Sa (_Sat _Accum a, int b) { return a >> b; } _Sat _Accum test14Sa (_Sat _Accum a, int b) { a <<= b; return a; } _Sat _Accum test15Sa (_Sat _Accum a, int b) { a >>= b; return a; } int test16Sa (_Sat _Accum a, _Sat _Accum b) { return a == b; } int test17Sa (_Sat _Accum a, _Sat _Accum b) { return a != b; } int test18Sa (_Sat _Accum a, _Sat _Accum b) { return a < b; } int test19Sa (_Sat _Accum a, _Sat _Accum b) { return a <= b; } int test20Sa (_Sat _Accum a, _Sat _Accum b) { return a >= b; } int test21Sa (_Sat _Accum a, _Sat _Accum b) { return a > b; } void test22Sa (_Sat _Accum a, _Sat _Accum b) { if(a == b)true(); else false(); } void test23Sa (_Sat _Accum a, _Sat _Accum b) { if(a != b)true(); else false(); } void test24Sa (_Sat _Accum a, _Sat _Accum b) { if(a < b)true(); else false(); } void test25Sa (_Sat _Accum a, _Sat _Accum b) { if(a <= b)true(); else false(); } void test26Sa (_Sat _Accum a, _Sat _Accum b) { if(a >= b)true(); else false(); } void test27Sa (_Sat _Accum a, _Sat _Accum b) { if(a > b)true(); else false(); } _Sat _Accum test28Sa (_Sat _Accum a) { return ++a; } _Sat _Accum test29Sa (_Sat _Accum a) { return --a; } _Sat _Accum test30Sa (_Sat _Accum *a) { return ++(*a); } _Sat _Accum test31Sa (_Sat _Accum *a) { return (*a)++; } _Sat _Accum test32Sa (_Sat _Accum *a) { return --(*a); } _Sat _Accum test33Sa (_Sat _Accum *a) { return (*a)--; };
_Sat long _Accum test1Sla (_Sat long _Accum a) { return +a; } _Sat long _Accum test2Sla (_Sat long _Accum a) { return -a; } int test3Sla (_Sat long _Accum a) { return !a; } _Sat long _Accum test4Sla (_Sat long _Accum a, _Sat long _Accum b) { return a + b; } _Sat long _Accum test5Sla (_Sat long _Accum a, _Sat long _Accum b) { return a - b; } _Sat long _Accum test6Sla (_Sat long _Accum a, _Sat long _Accum b) { return a * b; } _Sat long _Accum test7Sla (_Sat long _Accum a, _Sat long _Accum b) { return a / b; } _Sat long _Accum test8Sla (_Sat long _Accum a, _Sat long _Accum b) { a += b; return a; } _Sat long _Accum test9Sla (_Sat long _Accum a, _Sat long _Accum b) { a -= b; return a; } _Sat long _Accum test10Sla (_Sat long _Accum a, _Sat long _Accum b) { a *= b; return a; } _Sat long _Accum test11Sla (_Sat long _Accum a, _Sat long _Accum b) { a /= b; return a; } _Sat long _Accum test12Sla (_Sat long _Accum a, int b) { return a << b; } _Sat long _Accum test13Sla (_Sat long _Accum a, int b) { return a >> b; } _Sat long _Accum test14Sla (_Sat long _Accum a, int b) { a <<= b; return a; } _Sat long _Accum test15Sla (_Sat long _Accum a, int b) { a >>= b; return a; } int test16Sla (_Sat long _Accum a, _Sat long _Accum b) { return a == b; } int test17Sla (_Sat long _Accum a, _Sat long _Accum b) { return a != b; } int test18Sla (_Sat long _Accum a, _Sat long _Accum b) { return a < b; } int test19Sla (_Sat long _Accum a, _Sat long _Accum b) { return a <= b; } int test20Sla (_Sat long _Accum a, _Sat long _Accum b) { return a >= b; } int test21Sla (_Sat long _Accum a, _Sat long _Accum b) { return a > b; } void test22Sla (_Sat long _Accum a, _Sat long _Accum b) { if(a == b)true(); else false(); } void test23Sla (_Sat long _Accum a, _Sat long _Accum b) { if(a != b)true(); else false(); } void test24Sla (_Sat long _Accum a, _Sat long _Accum b) { if(a < b)true(); else false(); } void test25Sla (_Sat long _Accum a, _Sat long _Accum b) { if(a <= b)true(); else false(); } void test26Sla (_Sat long _Accum a, _Sat long _Accum b) { if(a >= b)true(); else false(); } void test27Sla (_Sat long _Accum a, _Sat long _Accum b) { if(a > b)true(); else false(); } _Sat long _Accum test28Sla (_Sat long _Accum a) { return ++a; } _Sat long _Accum test29Sla (_Sat long _Accum a) { return --a; } _Sat long _Accum test30Sla (_Sat long _Accum *a) { return ++(*a); } _Sat long _Accum test31Sla (_Sat long _Accum *a) { return (*a)++; } _Sat long _Accum test32Sla (_Sat long _Accum *a) { return --(*a); } _Sat long _Accum test33Sla (_Sat long _Accum *a) { return (*a)--; };
_Sat long long _Accum test1Slla (_Sat long long _Accum a) { return +a; } _Sat long long _Accum test2Slla (_Sat long long _Accum a) { return -a; } int test3Slla (_Sat long long _Accum a) { return !a; } _Sat long long _Accum test4Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a + b; } _Sat long long _Accum test5Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a - b; } _Sat long long _Accum test6Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a * b; } _Sat long long _Accum test7Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a / b; } _Sat long long _Accum test8Slla (_Sat long long _Accum a, _Sat long long _Accum b) { a += b; return a; } _Sat long long _Accum test9Slla (_Sat long long _Accum a, _Sat long long _Accum b) { a -= b; return a; } _Sat long long _Accum test10Slla (_Sat long long _Accum a, _Sat long long _Accum b) { a *= b; return a; } _Sat long long _Accum test11Slla (_Sat long long _Accum a, _Sat long long _Accum b) { a /= b; return a; } _Sat long long _Accum test12Slla (_Sat long long _Accum a, int b) { return a << b; } _Sat long long _Accum test13Slla (_Sat long long _Accum a, int b) { return a >> b; } _Sat long long _Accum test14Slla (_Sat long long _Accum a, int b) { a <<= b; return a; } _Sat long long _Accum test15Slla (_Sat long long _Accum a, int b) { a >>= b; return a; } int test16Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a == b; } int test17Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a != b; } int test18Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a < b; } int test19Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a <= b; } int test20Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a >= b; } int test21Slla (_Sat long long _Accum a, _Sat long long _Accum b) { return a > b; } void test22Slla (_Sat long long _Accum a, _Sat long long _Accum b) { if(a == b)true(); else false(); } void test23Slla (_Sat long long _Accum a, _Sat long long _Accum b) { if(a != b)true(); else false(); } void test24Slla (_Sat long long _Accum a, _Sat long long _Accum b) { if(a < b)true(); else false(); } void test25Slla (_Sat long long _Accum a, _Sat long long _Accum b) { if(a <= b)true(); else false(); } void test26Slla (_Sat long long _Accum a, _Sat long long _Accum b) { if(a >= b)true(); else false(); } void test27Slla (_Sat long long _Accum a, _Sat long long _Accum b) { if(a > b)true(); else false(); } _Sat long long _Accum test28Slla (_Sat long long _Accum a) { return ++a; } _Sat long long _Accum test29Slla (_Sat long long _Accum a) { return --a; } _Sat long long _Accum test30Slla (_Sat long long _Accum *a) { return ++(*a); } _Sat long long _Accum test31Slla (_Sat long long _Accum *a) { return (*a)++; } _Sat long long _Accum test32Slla (_Sat long long _Accum *a) { return --(*a); } _Sat long long _Accum test33Slla (_Sat long long _Accum *a) { return (*a)--; };

_Sat unsigned short _Fract test1Susf (_Sat unsigned short _Fract a) { return +a; } _Sat unsigned short _Fract test2Susf (_Sat unsigned short _Fract a) { return -a; } int test3Susf (_Sat unsigned short _Fract a) { return !a; } _Sat unsigned short _Fract test4Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a + b; } _Sat unsigned short _Fract test5Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a - b; } _Sat unsigned short _Fract test6Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a * b; } _Sat unsigned short _Fract test7Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a / b; } _Sat unsigned short _Fract test8Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { a += b; return a; } _Sat unsigned short _Fract test9Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { a -= b; return a; } _Sat unsigned short _Fract test10Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { a *= b; return a; } _Sat unsigned short _Fract test11Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { a /= b; return a; } _Sat unsigned short _Fract test12Susf (_Sat unsigned short _Fract a, int b) { return a << b; } _Sat unsigned short _Fract test13Susf (_Sat unsigned short _Fract a, int b) { return a >> b; } _Sat unsigned short _Fract test14Susf (_Sat unsigned short _Fract a, int b) { a <<= b; return a; } _Sat unsigned short _Fract test15Susf (_Sat unsigned short _Fract a, int b) { a >>= b; return a; } int test16Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a == b; } int test17Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a != b; } int test18Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a < b; } int test19Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a <= b; } int test20Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a >= b; } int test21Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { return a > b; } void test22Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { if(a == b)true(); else false(); } void test23Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { if(a != b)true(); else false(); } void test24Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { if(a < b)true(); else false(); } void test25Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { if(a <= b)true(); else false(); } void test26Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { if(a >= b)true(); else false(); } void test27Susf (_Sat unsigned short _Fract a, _Sat unsigned short _Fract b) { if(a > b)true(); else false(); } _Sat unsigned short _Fract test28Susf (_Sat unsigned short _Fract a) { return ++a; } _Sat unsigned short _Fract test29Susf (_Sat unsigned short _Fract a) { return --a; } _Sat unsigned short _Fract test30Susf (_Sat unsigned short _Fract *a) { return ++(*a); } _Sat unsigned short _Fract test31Susf (_Sat unsigned short _Fract *a) { return (*a)++; } _Sat unsigned short _Fract test32Susf (_Sat unsigned short _Fract *a) { return --(*a); } _Sat unsigned short _Fract test33Susf (_Sat unsigned short _Fract *a) { return (*a)--; };
_Sat unsigned _Fract test1Suf (_Sat unsigned _Fract a) { return +a; } _Sat unsigned _Fract test2Suf (_Sat unsigned _Fract a) { return -a; } int test3Suf (_Sat unsigned _Fract a) { return !a; } _Sat unsigned _Fract test4Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a + b; } _Sat unsigned _Fract test5Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a - b; } _Sat unsigned _Fract test6Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a * b; } _Sat unsigned _Fract test7Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a / b; } _Sat unsigned _Fract test8Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { a += b; return a; } _Sat unsigned _Fract test9Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { a -= b; return a; } _Sat unsigned _Fract test10Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { a *= b; return a; } _Sat unsigned _Fract test11Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { a /= b; return a; } _Sat unsigned _Fract test12Suf (_Sat unsigned _Fract a, int b) { return a << b; } _Sat unsigned _Fract test13Suf (_Sat unsigned _Fract a, int b) { return a >> b; } _Sat unsigned _Fract test14Suf (_Sat unsigned _Fract a, int b) { a <<= b; return a; } _Sat unsigned _Fract test15Suf (_Sat unsigned _Fract a, int b) { a >>= b; return a; } int test16Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a == b; } int test17Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a != b; } int test18Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a < b; } int test19Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a <= b; } int test20Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a >= b; } int test21Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { return a > b; } void test22Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { if(a == b)true(); else false(); } void test23Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { if(a != b)true(); else false(); } void test24Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { if(a < b)true(); else false(); } void test25Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { if(a <= b)true(); else false(); } void test26Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { if(a >= b)true(); else false(); } void test27Suf (_Sat unsigned _Fract a, _Sat unsigned _Fract b) { if(a > b)true(); else false(); } _Sat unsigned _Fract test28Suf (_Sat unsigned _Fract a) { return ++a; } _Sat unsigned _Fract test29Suf (_Sat unsigned _Fract a) { return --a; } _Sat unsigned _Fract test30Suf (_Sat unsigned _Fract *a) { return ++(*a); } _Sat unsigned _Fract test31Suf (_Sat unsigned _Fract *a) { return (*a)++; } _Sat unsigned _Fract test32Suf (_Sat unsigned _Fract *a) { return --(*a); } _Sat unsigned _Fract test33Suf (_Sat unsigned _Fract *a) { return (*a)--; };
_Sat unsigned long _Fract test1Sulf (_Sat unsigned long _Fract a) { return +a; } _Sat unsigned long _Fract test2Sulf (_Sat unsigned long _Fract a) { return -a; } int test3Sulf (_Sat unsigned long _Fract a) { return !a; } _Sat unsigned long _Fract test4Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a + b; } _Sat unsigned long _Fract test5Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a - b; } _Sat unsigned long _Fract test6Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a * b; } _Sat unsigned long _Fract test7Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a / b; } _Sat unsigned long _Fract test8Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { a += b; return a; } _Sat unsigned long _Fract test9Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { a -= b; return a; } _Sat unsigned long _Fract test10Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { a *= b; return a; } _Sat unsigned long _Fract test11Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { a /= b; return a; } _Sat unsigned long _Fract test12Sulf (_Sat unsigned long _Fract a, int b) { return a << b; } _Sat unsigned long _Fract test13Sulf (_Sat unsigned long _Fract a, int b) { return a >> b; } _Sat unsigned long _Fract test14Sulf (_Sat unsigned long _Fract a, int b) { a <<= b; return a; } _Sat unsigned long _Fract test15Sulf (_Sat unsigned long _Fract a, int b) { a >>= b; return a; } int test16Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a == b; } int test17Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a != b; } int test18Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a < b; } int test19Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a <= b; } int test20Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a >= b; } int test21Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { return a > b; } void test22Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { if(a == b)true(); else false(); } void test23Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { if(a != b)true(); else false(); } void test24Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { if(a < b)true(); else false(); } void test25Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { if(a <= b)true(); else false(); } void test26Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { if(a >= b)true(); else false(); } void test27Sulf (_Sat unsigned long _Fract a, _Sat unsigned long _Fract b) { if(a > b)true(); else false(); } _Sat unsigned long _Fract test28Sulf (_Sat unsigned long _Fract a) { return ++a; } _Sat unsigned long _Fract test29Sulf (_Sat unsigned long _Fract a) { return --a; } _Sat unsigned long _Fract test30Sulf (_Sat unsigned long _Fract *a) { return ++(*a); } _Sat unsigned long _Fract test31Sulf (_Sat unsigned long _Fract *a) { return (*a)++; } _Sat unsigned long _Fract test32Sulf (_Sat unsigned long _Fract *a) { return --(*a); } _Sat unsigned long _Fract test33Sulf (_Sat unsigned long _Fract *a) { return (*a)--; };
_Sat unsigned long long _Fract test1Sullf (_Sat unsigned long long _Fract a) { return +a; } _Sat unsigned long long _Fract test2Sullf (_Sat unsigned long long _Fract a) { return -a; } int test3Sullf (_Sat unsigned long long _Fract a) { return !a; } _Sat unsigned long long _Fract test4Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a + b; } _Sat unsigned long long _Fract test5Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a - b; } _Sat unsigned long long _Fract test6Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a * b; } _Sat unsigned long long _Fract test7Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a / b; } _Sat unsigned long long _Fract test8Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { a += b; return a; } _Sat unsigned long long _Fract test9Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { a -= b; return a; } _Sat unsigned long long _Fract test10Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { a *= b; return a; } _Sat unsigned long long _Fract test11Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { a /= b; return a; } _Sat unsigned long long _Fract test12Sullf (_Sat unsigned long long _Fract a, int b) { return a << b; } _Sat unsigned long long _Fract test13Sullf (_Sat unsigned long long _Fract a, int b) { return a >> b; } _Sat unsigned long long _Fract test14Sullf (_Sat unsigned long long _Fract a, int b) { a <<= b; return a; } _Sat unsigned long long _Fract test15Sullf (_Sat unsigned long long _Fract a, int b) { a >>= b; return a; } int test16Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a == b; } int test17Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a != b; } int test18Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a < b; } int test19Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a <= b; } int test20Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a >= b; } int test21Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { return a > b; } void test22Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { if(a == b)true(); else false(); } void test23Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { if(a != b)true(); else false(); } void test24Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { if(a < b)true(); else false(); } void test25Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { if(a <= b)true(); else false(); } void test26Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { if(a >= b)true(); else false(); } void test27Sullf (_Sat unsigned long long _Fract a, _Sat unsigned long long _Fract b) { if(a > b)true(); else false(); } _Sat unsigned long long _Fract test28Sullf (_Sat unsigned long long _Fract a) { return ++a; } _Sat unsigned long long _Fract test29Sullf (_Sat unsigned long long _Fract a) { return --a; } _Sat unsigned long long _Fract test30Sullf (_Sat unsigned long long _Fract *a) { return ++(*a); } _Sat unsigned long long _Fract test31Sullf (_Sat unsigned long long _Fract *a) { return (*a)++; } _Sat unsigned long long _Fract test32Sullf (_Sat unsigned long long _Fract *a) { return --(*a); } _Sat unsigned long long _Fract test33Sullf (_Sat unsigned long long _Fract *a) { return (*a)--; };
_Sat unsigned short _Accum test1Susa (_Sat unsigned short _Accum a) { return +a; } _Sat unsigned short _Accum test2Susa (_Sat unsigned short _Accum a) { return -a; } int test3Susa (_Sat unsigned short _Accum a) { return !a; } _Sat unsigned short _Accum test4Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a + b; } _Sat unsigned short _Accum test5Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a - b; } _Sat unsigned short _Accum test6Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a * b; } _Sat unsigned short _Accum test7Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a / b; } _Sat unsigned short _Accum test8Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { a += b; return a; } _Sat unsigned short _Accum test9Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { a -= b; return a; } _Sat unsigned short _Accum test10Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { a *= b; return a; } _Sat unsigned short _Accum test11Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { a /= b; return a; } _Sat unsigned short _Accum test12Susa (_Sat unsigned short _Accum a, int b) { return a << b; } _Sat unsigned short _Accum test13Susa (_Sat unsigned short _Accum a, int b) { return a >> b; } _Sat unsigned short _Accum test14Susa (_Sat unsigned short _Accum a, int b) { a <<= b; return a; } _Sat unsigned short _Accum test15Susa (_Sat unsigned short _Accum a, int b) { a >>= b; return a; } int test16Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a == b; } int test17Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a != b; } int test18Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a < b; } int test19Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a <= b; } int test20Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a >= b; } int test21Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { return a > b; } void test22Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { if(a == b)true(); else false(); } void test23Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { if(a != b)true(); else false(); } void test24Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { if(a < b)true(); else false(); } void test25Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { if(a <= b)true(); else false(); } void test26Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { if(a >= b)true(); else false(); } void test27Susa (_Sat unsigned short _Accum a, _Sat unsigned short _Accum b) { if(a > b)true(); else false(); } _Sat unsigned short _Accum test28Susa (_Sat unsigned short _Accum a) { return ++a; } _Sat unsigned short _Accum test29Susa (_Sat unsigned short _Accum a) { return --a; } _Sat unsigned short _Accum test30Susa (_Sat unsigned short _Accum *a) { return ++(*a); } _Sat unsigned short _Accum test31Susa (_Sat unsigned short _Accum *a) { return (*a)++; } _Sat unsigned short _Accum test32Susa (_Sat unsigned short _Accum *a) { return --(*a); } _Sat unsigned short _Accum test33Susa (_Sat unsigned short _Accum *a) { return (*a)--; };
_Sat unsigned _Accum test1Sua (_Sat unsigned _Accum a) { return +a; } _Sat unsigned _Accum test2Sua (_Sat unsigned _Accum a) { return -a; } int test3Sua (_Sat unsigned _Accum a) { return !a; } _Sat unsigned _Accum test4Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a + b; } _Sat unsigned _Accum test5Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a - b; } _Sat unsigned _Accum test6Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a * b; } _Sat unsigned _Accum test7Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a / b; } _Sat unsigned _Accum test8Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { a += b; return a; } _Sat unsigned _Accum test9Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { a -= b; return a; } _Sat unsigned _Accum test10Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { a *= b; return a; } _Sat unsigned _Accum test11Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { a /= b; return a; } _Sat unsigned _Accum test12Sua (_Sat unsigned _Accum a, int b) { return a << b; } _Sat unsigned _Accum test13Sua (_Sat unsigned _Accum a, int b) { return a >> b; } _Sat unsigned _Accum test14Sua (_Sat unsigned _Accum a, int b) { a <<= b; return a; } _Sat unsigned _Accum test15Sua (_Sat unsigned _Accum a, int b) { a >>= b; return a; } int test16Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a == b; } int test17Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a != b; } int test18Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a < b; } int test19Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a <= b; } int test20Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a >= b; } int test21Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { return a > b; } void test22Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { if(a == b)true(); else false(); } void test23Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { if(a != b)true(); else false(); } void test24Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { if(a < b)true(); else false(); } void test25Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { if(a <= b)true(); else false(); } void test26Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { if(a >= b)true(); else false(); } void test27Sua (_Sat unsigned _Accum a, _Sat unsigned _Accum b) { if(a > b)true(); else false(); } _Sat unsigned _Accum test28Sua (_Sat unsigned _Accum a) { return ++a; } _Sat unsigned _Accum test29Sua (_Sat unsigned _Accum a) { return --a; } _Sat unsigned _Accum test30Sua (_Sat unsigned _Accum *a) { return ++(*a); } _Sat unsigned _Accum test31Sua (_Sat unsigned _Accum *a) { return (*a)++; } _Sat unsigned _Accum test32Sua (_Sat unsigned _Accum *a) { return --(*a); } _Sat unsigned _Accum test33Sua (_Sat unsigned _Accum *a) { return (*a)--; };
_Sat unsigned long _Accum test1Sula (_Sat unsigned long _Accum a) { return +a; } _Sat unsigned long _Accum test2Sula (_Sat unsigned long _Accum a) { return -a; } int test3Sula (_Sat unsigned long _Accum a) { return !a; } _Sat unsigned long _Accum test4Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a + b; } _Sat unsigned long _Accum test5Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a - b; } _Sat unsigned long _Accum test6Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a * b; } _Sat unsigned long _Accum test7Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a / b; } _Sat unsigned long _Accum test8Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { a += b; return a; } _Sat unsigned long _Accum test9Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { a -= b; return a; } _Sat unsigned long _Accum test10Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { a *= b; return a; } _Sat unsigned long _Accum test11Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { a /= b; return a; } _Sat unsigned long _Accum test12Sula (_Sat unsigned long _Accum a, int b) { return a << b; } _Sat unsigned long _Accum test13Sula (_Sat unsigned long _Accum a, int b) { return a >> b; } _Sat unsigned long _Accum test14Sula (_Sat unsigned long _Accum a, int b) { a <<= b; return a; } _Sat unsigned long _Accum test15Sula (_Sat unsigned long _Accum a, int b) { a >>= b; return a; } int test16Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a == b; } int test17Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a != b; } int test18Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a < b; } int test19Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a <= b; } int test20Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a >= b; } int test21Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { return a > b; } void test22Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { if(a == b)true(); else false(); } void test23Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { if(a != b)true(); else false(); } void test24Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { if(a < b)true(); else false(); } void test25Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { if(a <= b)true(); else false(); } void test26Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { if(a >= b)true(); else false(); } void test27Sula (_Sat unsigned long _Accum a, _Sat unsigned long _Accum b) { if(a > b)true(); else false(); } _Sat unsigned long _Accum test28Sula (_Sat unsigned long _Accum a) { return ++a; } _Sat unsigned long _Accum test29Sula (_Sat unsigned long _Accum a) { return --a; } _Sat unsigned long _Accum test30Sula (_Sat unsigned long _Accum *a) { return ++(*a); } _Sat unsigned long _Accum test31Sula (_Sat unsigned long _Accum *a) { return (*a)++; } _Sat unsigned long _Accum test32Sula (_Sat unsigned long _Accum *a) { return --(*a); } _Sat unsigned long _Accum test33Sula (_Sat unsigned long _Accum *a) { return (*a)--; };
_Sat unsigned long long _Accum test1Sulla (_Sat unsigned long long _Accum a) { return +a; } _Sat unsigned long long _Accum test2Sulla (_Sat unsigned long long _Accum a) { return -a; } int test3Sulla (_Sat unsigned long long _Accum a) { return !a; } _Sat unsigned long long _Accum test4Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a + b; } _Sat unsigned long long _Accum test5Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a - b; } _Sat unsigned long long _Accum test6Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a * b; } _Sat unsigned long long _Accum test7Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a / b; } _Sat unsigned long long _Accum test8Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { a += b; return a; } _Sat unsigned long long _Accum test9Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { a -= b; return a; } _Sat unsigned long long _Accum test10Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { a *= b; return a; } _Sat unsigned long long _Accum test11Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { a /= b; return a; } _Sat unsigned long long _Accum test12Sulla (_Sat unsigned long long _Accum a, int b) { return a << b; } _Sat unsigned long long _Accum test13Sulla (_Sat unsigned long long _Accum a, int b) { return a >> b; } _Sat unsigned long long _Accum test14Sulla (_Sat unsigned long long _Accum a, int b) { a <<= b; return a; } _Sat unsigned long long _Accum test15Sulla (_Sat unsigned long long _Accum a, int b) { a >>= b; return a; } int test16Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a == b; } int test17Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a != b; } int test18Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a < b; } int test19Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a <= b; } int test20Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a >= b; } int test21Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { return a > b; } void test22Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { if(a == b)true(); else false(); } void test23Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { if(a != b)true(); else false(); } void test24Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { if(a < b)true(); else false(); } void test25Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { if(a <= b)true(); else false(); } void test26Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { if(a >= b)true(); else false(); } void test27Sulla (_Sat unsigned long long _Accum a, _Sat unsigned long long _Accum b) { if(a > b)true(); else false(); } _Sat unsigned long long _Accum test28Sulla (_Sat unsigned long long _Accum a) { return ++a; } _Sat unsigned long long _Accum test29Sulla (_Sat unsigned long long _Accum a) { return --a; } _Sat unsigned long long _Accum test30Sulla (_Sat unsigned long long _Accum *a) { return ++(*a); } _Sat unsigned long long _Accum test31Sulla (_Sat unsigned long long _Accum *a) { return (*a)++; } _Sat unsigned long long _Accum test32Sulla (_Sat unsigned long long _Accum *a) { return --(*a); } _Sat unsigned long long _Accum test33Sulla (_Sat unsigned long long _Accum *a) { return (*a)--; };
