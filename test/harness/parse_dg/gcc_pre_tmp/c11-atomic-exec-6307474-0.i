# 1 "c11-atomic-exec-6.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "c11-atomic-exec-6.c"
# 33 "c11-atomic-exec-6.c"
int
main (void)
{
  do { _Bool a[3][3]; _Bool (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { char a[3][3]; char (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { signed char a[3][3]; signed char (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { unsigned char a[3][3]; unsigned char (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { signed short a[3][3]; signed short (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { unsigned short a[3][3]; unsigned short (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { signed int a[3][3]; signed int (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { unsigned int a[3][3]; unsigned int (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { signed long a[3][3]; signed long (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { unsigned long a[3][3]; unsigned long (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { signed long long a[3][3]; signed long long (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { unsigned long long a[3][3]; unsigned long long (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { float a[3][3]; float (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { double a[3][3]; double (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { long double a[3][3]; long double (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { _Complex float a[3][3]; _Complex float (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { _Complex double a[3][3]; _Complex double (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
  do { _Complex long double a[3][3]; _Complex long double (*_Atomic q)[3] = &a[0]; ++q; if (q != &a[1]) __builtin_abort (); q++; if (q != &a[2]) __builtin_abort (); --q; if (q != &a[1]) __builtin_abort (); q--; if (q != &a[0]) __builtin_abort (); q += 2; if (q != &a[2]) __builtin_abort (); q -= 2; if (q != &a[0]) __builtin_abort (); } while (0);
}
