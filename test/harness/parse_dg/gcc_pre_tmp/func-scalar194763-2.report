Failed to parse func-scalar.c
with message:
Syntax error !The symbol `sf0' does not fit here. ("func-scalar.c": line 25)
/* No Input */
Working dir: /home/noah/src/package-sources/language-c/test/harness/parse_dg
Preprocessed input follows:

# 1 "func-scalar.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "func-scalar.c"







extern void abort (void);
# 25 "func-scalar.c"
short _Fract sf0 (short _Fract arg0, short _Fract arg1, short _Fract arg2, short _Fract arg3, short _Fract arg4) { return arg0; } short _Fract sf1 (short _Fract arg0, short _Fract arg1, short _Fract arg2, short _Fract arg3, short _Fract arg4) { return arg1; } short _Fract sf2 (short _Fract arg0, short _Fract arg1, short _Fract arg2, short _Fract arg3, short _Fract arg4) { return arg2; } short _Fract sf3 (short _Fract arg0, short _Fract arg1, short _Fract arg2, short _Fract arg3, short _Fract arg4) { return arg3; } short _Fract sf4 (short _Fract arg0, short _Fract arg1, short _Fract arg2, short _Fract arg3, short _Fract arg4) { return arg4; }
_Fract f0 (_Fract arg0, _Fract arg1, _Fract arg2, _Fract arg3, _Fract arg4) { return arg0; } _Fract f1 (_Fract arg0, _Fract arg1, _Fract arg2, _Fract arg3, _Fract arg4) { return arg1; } _Fract f2 (_Fract arg0, _Fract arg1, _Fract arg2, _Fract arg3, _Fract arg4) { return arg2; } _Fract f3 (_Fract arg0, _Fract arg1, _Fract arg2, _Fract arg3, _Fract arg4) { return arg3; } _Fract f4 (_Fract arg0, _Fract arg1, _Fract arg2, _Fract arg3, _Fract arg4) { return arg4; }
long _Fract lf0 (long _Fract arg0, long _Fract arg1, long _Fract arg2, long _Fract arg3, long _Fract arg4) { return arg0; } long _Fract lf1 (long _Fract arg0, long _Fract arg1, long _Fract arg2, long _Fract arg3, long _Fract arg4) { return arg1; } long _Fract lf2 (long _Fract arg0, long _Fract arg1, long _Fract arg2, long _Fract arg3, long _Fract arg4) { return arg2; } long _Fract lf3 (long _Fract arg0, long _Fract arg1, long _Fract arg2, long _Fract arg3, long _Fract arg4) { return arg3; } long _Fract lf4 (long _Fract arg0, long _Fract arg1, long _Fract arg2, long _Fract arg3, long _Fract arg4) { return arg4; }
long long _Fract llf0 (long long _Fract arg0, long long _Fract arg1, long long _Fract arg2, long long _Fract arg3, long long _Fract arg4) { return arg0; } long long _Fract llf1 (long long _Fract arg0, long long _Fract arg1, long long _Fract arg2, long long _Fract arg3, long long _Fract arg4) { return arg1; } long long _Fract llf2 (long long _Fract arg0, long long _Fract arg1, long long _Fract arg2, long long _Fract arg3, long long _Fract arg4) { return arg2; } long long _Fract llf3 (long long _Fract arg0, long long _Fract arg1, long long _Fract arg2, long long _Fract arg3, long long _Fract arg4) { return arg3; } long long _Fract llf4 (long long _Fract arg0, long long _Fract arg1, long long _Fract arg2, long long _Fract arg3, long long _Fract arg4) { return arg4; }
unsigned short _Fract usf0 (unsigned short _Fract arg0, unsigned short _Fract arg1, unsigned short _Fract arg2, unsigned short _Fract arg3, unsigned short _Fract arg4) { return arg0; } unsigned short _Fract usf1 (unsigned short _Fract arg0, unsigned short _Fract arg1, unsigned short _Fract arg2, unsigned short _Fract arg3, unsigned short _Fract arg4) { return arg1; } unsigned short _Fract usf2 (unsigned short _Fract arg0, unsigned short _Fract arg1, unsigned short _Fract arg2, unsigned short _Fract arg3, unsigned short _Fract arg4) { return arg2; } unsigned short _Fract usf3 (unsigned short _Fract arg0, unsigned short _Fract arg1, unsigned short _Fract arg2, unsigned short _Fract arg3, unsigned short _Fract arg4) { return arg3; } unsigned short _Fract usf4 (unsigned short _Fract arg0, unsigned short _Fract arg1, unsigned short _Fract arg2, unsigned short _Fract arg3, unsigned short _Fract arg4) { return arg4; }
unsigned _Fract uf0 (unsigned _Fract arg0, unsigned _Fract arg1, unsigned _Fract arg2, unsigned _Fract arg3, unsigned _Fract arg4) { return arg0; } unsigned _Fract uf1 (unsigned _Fract arg0, unsigned _Fract arg1, unsigned _Fract arg2, unsigned _Fract arg3, unsigned _Fract arg4) { return arg1; } unsigned _Fract uf2 (unsigned _Fract arg0, unsigned _Fract arg1, unsigned _Fract arg2, unsigned _Fract arg3, unsigned _Fract arg4) { return arg2; } unsigned _Fract uf3 (unsigned _Fract arg0, unsigned _Fract arg1, unsigned _Fract arg2, unsigned _Fract arg3, unsigned _Fract arg4) { return arg3; } unsigned _Fract uf4 (unsigned _Fract arg0, unsigned _Fract arg1, unsigned _Fract arg2, unsigned _Fract arg3, unsigned _Fract arg4) { return arg4; }
unsigned long _Fract ulf0 (unsigned long _Fract arg0, unsigned long _Fract arg1, unsigned long _Fract arg2, unsigned long _Fract arg3, unsigned long _Fract arg4) { return arg0; } unsigned long _Fract ulf1 (unsigned long _Fract arg0, unsigned long _Fract arg1, unsigned long _Fract arg2, unsigned long _Fract arg3, unsigned long _Fract arg4) { return arg1; } unsigned long _Fract ulf2 (unsigned long _Fract arg0, unsigned long _Fract arg1, unsigned long _Fract arg2, unsigned long _Fract arg3, unsigned long _Fract arg4) { return arg2; } unsigned long _Fract ulf3 (unsigned long _Fract arg0, unsigned long _Fract arg1, unsigned long _Fract arg2, unsigned long _Fract arg3, unsigned long _Fract arg4) { return arg3; } unsigned long _Fract ulf4 (unsigned long _Fract arg0, unsigned long _Fract arg1, unsigned long _Fract arg2, unsigned long _Fract arg3, unsigned long _Fract arg4) { return arg4; }
unsigned long long _Fract ullf0 (unsigned long long _Fract arg0, unsigned long long _Fract arg1, unsigned long long _Fract arg2, unsigned long long _Fract arg3, unsigned long long _Fract arg4) { return arg0; } unsigned long long _Fract ullf1 (unsigned long long _Fract arg0, unsigned long long _Fract arg1, unsigned long long _Fract arg2, unsigned long long _Fract arg3, unsigned long long _Fract arg4) { return arg1; } unsigned long long _Fract ullf2 (unsigned long long _Fract arg0, unsigned long long _Fract arg1, unsigned long long _Fract arg2, unsigned long long _Fract arg3, unsigned long long _Fract arg4) { return arg2; } unsigned long long _Fract ullf3 (unsigned long long _Fract arg0, unsigned long long _Fract arg1, unsigned long long _Fract arg2, unsigned long long _Fract arg3, unsigned long long _Fract arg4) { return arg3; } unsigned long long _Fract ullf4 (unsigned long long _Fract arg0, unsigned long long _Fract arg1, unsigned long long _Fract arg2, unsigned long long _Fract arg3, unsigned long long _Fract arg4) { return arg4; }
_Sat short _Fract Ssf0 (_Sat short _Fract arg0, _Sat short _Fract arg1, _Sat short _Fract arg2, _Sat short _Fract arg3, _Sat short _Fract arg4) { return arg0; } _Sat short _Fract Ssf1 (_Sat short _Fract arg0, _Sat short _Fract arg1, _Sat short _Fract arg2, _Sat short _Fract arg3, _Sat short _Fract arg4) { return arg1; } _Sat short _Fract Ssf2 (_Sat short _Fract arg0, _Sat short _Fract arg1, _Sat short _Fract arg2, _Sat short _Fract arg3, _Sat short _Fract arg4) { return arg2; } _Sat short _Fract Ssf3 (_Sat short _Fract arg0, _Sat short _Fract arg1, _Sat short _Fract arg2, _Sat short _Fract arg3, _Sat short _Fract arg4) { return arg3; } _Sat short _Fract Ssf4 (_Sat short _Fract arg0, _Sat short _Fract arg1, _Sat short _Fract arg2, _Sat short _Fract arg3, _Sat short _Fract arg4) { return arg4; }
_Sat _Fract Sf0 (_Sat _Fract arg0, _Sat _Fract arg1, _Sat _Fract arg2, _Sat _Fract arg3, _Sat _Fract arg4) { return arg0; } _Sat _Fract Sf1 (_Sat _Fract arg0, _Sat _Fract arg1, _Sat _Fract arg2, _Sat _Fract arg3, _Sat _Fract arg4) { return arg1; } _Sat _Fract Sf2 (_Sat _Fract arg0, _Sat _Fract arg1, _Sat _Fract arg2, _Sat _Fract arg3, _Sat _Fract arg4) { return arg2; } _Sat _Fract Sf3 (_Sat _Fract arg0, _Sat _Fract arg1, _Sat _Fract arg2, _Sat _Fract arg3, _Sat _Fract arg4) { return arg3; } _Sat _Fract Sf4 (_Sat _Fract arg0, _Sat _Fract arg1, _Sat _Fract arg2, _Sat _Fract arg3, _Sat _Fract arg4) { return arg4; }
_Sat long _Fract Slf0 (_Sat long _Fract arg0, _Sat long _Fract arg1, _Sat long _Fract arg2, _Sat long _Fract arg3, _Sat long _Fract arg4) { return arg0; } _Sat long _Fract Slf1 (_Sat long _Fract arg0, _Sat long _Fract arg1, _Sat long _Fract arg2, _Sat long _Fract arg3, _Sat long _Fract arg4) { return arg1; } _Sat long _Fract Slf2 (_Sat long _Fract arg0, _Sat long _Fract arg1, _Sat long _Fract arg2, _Sat long _Fract arg3, _Sat long _Fract arg4) { return arg2; } _Sat long _Fract Slf3 (_Sat long _Fract arg0, _Sat long _Fract arg1, _Sat long _Fract arg2, _Sat long _Fract arg3, _Sat long _Fract arg4) { return arg3; } _Sat long _Fract Slf4 (_Sat long _Fract arg0, _Sat long _Fract arg1, _Sat long _Fract arg2, _Sat long _Fract arg3, _Sat long _Fract arg4) { return arg4; }
_Sat long long _Fract Sllf0 (_Sat long long _Fract arg0, _Sat long long _Fract arg1, _Sat long long _Fract arg2, _Sat long long _Fract arg3, _Sat long long _Fract arg4) { return arg0; } _Sat long long _Fract Sllf1 (_Sat long long _Fract arg0, _Sat long long _Fract arg1, _Sat long long _Fract arg2, _Sat long long _Fract arg3, _Sat long long _Fract arg4) { return arg1; } _Sat long long _Fract Sllf2 (_Sat long long _Fract arg0, _Sat long long _Fract arg1, _Sat long long _Fract arg2, _Sat long long _Fract arg3, _Sat long long _Fract arg4) { return arg2; } _Sat long long _Fract Sllf3 (_Sat long long _Fract arg0, _Sat long long _Fract arg1, _Sat long long _Fract arg2, _Sat long long _Fract arg3, _Sat long long _Fract arg4) { return arg3; } _Sat long long _Fract Sllf4 (_Sat long long _Fract arg0, _Sat long long _Fract arg1, _Sat long long _Fract arg2, _Sat long long _Fract arg3, _Sat long long _Fract arg4) { return arg4; }
_Sat unsigned short _Fract Susf0 (_Sat unsigned short _Fract arg0, _Sat unsigned short _Fract arg1, _Sat unsigned short _Fract arg2, _Sat unsigned short _Fract arg3, _Sat unsigned short _Fract arg4) { return arg0; } _Sat unsigned short _Fract Susf1 (_Sat unsigned short _Fract arg0, _Sat unsigned short _Fract arg1, _Sat unsigned short _Fract arg2, _Sat unsigned short _Fract arg3, _Sat unsigned short _Fract arg4) { return arg1; } _Sat unsigned short _Fract Susf2 (_Sat unsigned short _Fract arg0, _Sat unsigned short _Fract arg1, _Sat unsigned short _Fract arg2, _Sat unsigned short _Fract arg3, _Sat unsigned short _Fract arg4) { return arg2; } _Sat unsigned short _Fract Susf3 (_Sat unsigned short _Fract arg0, _Sat unsigned short _Fract arg1, _Sat unsigned short _Fract arg2, _Sat unsigned short _Fract arg3, _Sat unsigned short _Fract arg4) { return arg3; } _Sat unsigned short _Fract Susf4 (_Sat unsigned short _Fract arg0, _Sat unsigned short _Fract arg1, _Sat unsigned short _Fract arg2, _Sat unsigned short _Fract arg3, _Sat unsigned short _Fract arg4) { return arg4; }
_Sat unsigned _Fract Suf0 (_Sat unsigned _Fract arg0, _Sat unsigned _Fract arg1, _Sat unsigned _Fract arg2, _Sat unsigned _Fract arg3, _Sat unsigned _Fract arg4) { return arg0; } _Sat unsigned _Fract Suf1 (_Sat unsigned _Fract arg0, _Sat unsigned _Fract arg1, _Sat unsigned _Fract arg2, _Sat unsigned _Fract arg3, _Sat unsigned _Fract arg4) { return arg1; } _Sat unsigned _Fract Suf2 (_Sat unsigned _Fract arg0, _Sat unsigned _Fract arg1, _Sat unsigned _Fract arg2, _Sat unsigned _Fract arg3, _Sat unsigned _Fract arg4) { return arg2; } _Sat unsigned _Fract Suf3 (_Sat unsigned _Fract arg0, _Sat unsigned _Fract arg1, _Sat unsigned _Fract arg2, _Sat unsigned _Fract arg3, _Sat unsigned _Fract arg4) { return arg3; } _Sat unsigned _Fract Suf4 (_Sat unsigned _Fract arg0, _Sat unsigned _Fract arg1, _Sat unsigned _Fract arg2, _Sat unsigned _Fract arg3, _Sat unsigned _Fract arg4) { return arg4; }
_Sat unsigned long _Fract Sulf0 (_Sat unsigned long _Fract arg0, _Sat unsigned long _Fract arg1, _Sat unsigned long _Fract arg2, _Sat unsigned long _Fract arg3, _Sat unsigned long _Fract arg4) { return arg0; } _Sat unsigned long _Fract Sulf1 (_Sat unsigned long _Fract arg0, _Sat unsigned long _Fract arg1, _Sat unsigned long _Fract arg2, _Sat unsigned long _Fract arg3, _Sat unsigned long _Fract arg4) { return arg1; } _Sat unsigned long _Fract Sulf2 (_Sat unsigned long _Fract arg0, _Sat unsigned long _Fract arg1, _Sat unsigned long _Fract arg2, _Sat unsigned long _Fract arg3, _Sat unsigned long _Fract arg4) { return arg2; } _Sat unsigned long _Fract Sulf3 (_Sat unsigned long _Fract arg0, _Sat unsigned long _Fract arg1, _Sat unsigned long _Fract arg2, _Sat unsigned long _Fract arg3, _Sat unsigned long _Fract arg4) { return arg3; } _Sat unsigned long _Fract Sulf4 (_Sat unsigned long _Fract arg0, _Sat unsigned long _Fract arg1, _Sat unsigned long _Fract arg2, _Sat unsigned long _Fract arg3, _Sat unsigned long _Fract arg4) { return arg4; }
_Sat unsigned long long _Fract Sullf0 (_Sat unsigned long long _Fract arg0, _Sat unsigned long long _Fract arg1, _Sat unsigned long long _Fract arg2, _Sat unsigned long long _Fract arg3, _Sat unsigned long long _Fract arg4) { return arg0; } _Sat unsigned long long _Fract Sullf1 (_Sat unsigned long long _Fract arg0, _Sat unsigned long long _Fract arg1, _Sat unsigned long long _Fract arg2, _Sat unsigned long long _Fract arg3, _Sat unsigned long long _Fract arg4) { return arg1; } _Sat unsigned long long _Fract Sullf2 (_Sat unsigned long long _Fract arg0, _Sat unsigned long long _Fract arg1, _Sat unsigned long long _Fract arg2, _Sat unsigned long long _Fract arg3, _Sat unsigned long long _Fract arg4) { return arg2; } _Sat unsigned long long _Fract Sullf3 (_Sat unsigned long long _Fract arg0, _Sat unsigned long long _Fract arg1, _Sat unsigned long long _Fract arg2, _Sat unsigned long long _Fract arg3, _Sat unsigned long long _Fract arg4) { return arg3; } _Sat unsigned long long _Fract Sullf4 (_Sat unsigned long long _Fract arg0, _Sat unsigned long long _Fract arg1, _Sat unsigned long long _Fract arg2, _Sat unsigned long long _Fract arg3, _Sat unsigned long long _Fract arg4) { return arg4; }
short _Accum sa0 (short _Accum arg0, short _Accum arg1, short _Accum arg2, short _Accum arg3, short _Accum arg4) { return arg0; } short _Accum sa1 (short _Accum arg0, short _Accum arg1, short _Accum arg2, short _Accum arg3, short _Accum arg4) { return arg1; } short _Accum sa2 (short _Accum arg0, short _Accum arg1, short _Accum arg2, short _Accum arg3, short _Accum arg4) { return arg2; } short _Accum sa3 (short _Accum arg0, short _Accum arg1, short _Accum arg2, short _Accum arg3, short _Accum arg4) { return arg3; } short _Accum sa4 (short _Accum arg0, short _Accum arg1, short _Accum arg2, short _Accum arg3, short _Accum arg4) { return arg4; }
_Accum a0 (_Accum arg0, _Accum arg1, _Accum arg2, _Accum arg3, _Accum arg4) { return arg0; } _Accum a1 (_Accum arg0, _Accum arg1, _Accum arg2, _Accum arg3, _Accum arg4) { return arg1; } _Accum a2 (_Accum arg0, _Accum arg1, _Accum arg2, _Accum arg3, _Accum arg4) { return arg2; } _Accum a3 (_Accum arg0, _Accum arg1, _Accum arg2, _Accum arg3, _Accum arg4) { return arg3; } _Accum a4 (_Accum arg0, _Accum arg1, _Accum arg2, _Accum arg3, _Accum arg4) { return arg4; }
long _Accum la0 (long _Accum arg0, long _Accum arg1, long _Accum arg2, long _Accum arg3, long _Accum arg4) { return arg0; } long _Accum la1 (long _Accum arg0, long _Accum arg1, long _Accum arg2, long _Accum arg3, long _Accum arg4) { return arg1; } long _Accum la2 (long _Accum arg0, long _Accum arg1, long _Accum arg2, long _Accum arg3, long _Accum arg4) { return arg2; } long _Accum la3 (long _Accum arg0, long _Accum arg1, long _Accum arg2, long _Accum arg3, long _Accum arg4) { return arg3; } long _Accum la4 (long _Accum arg0, long _Accum arg1, long _Accum arg2, long _Accum arg3, long _Accum arg4) { return arg4; }
long long _Accum lla0 (long long _Accum arg0, long long _Accum arg1, long long _Accum arg2, long long _Accum arg3, long long _Accum arg4) { return arg0; } long long _Accum lla1 (long long _Accum arg0, long long _Accum arg1, long long _Accum arg2, long long _Accum arg3, long long _Accum arg4) { return arg1; } long long _Accum lla2 (long long _Accum arg0, long long _Accum arg1, long long _Accum arg2, long long _Accum arg3, long long _Accum arg4) { return arg2; } long long _Accum lla3 (long long _Accum arg0, long long _Accum arg1, long long _Accum arg2, long long _Accum arg3, long long _Accum arg4) { return arg3; } long long _Accum lla4 (long long _Accum arg0, long long _Accum arg1, long long _Accum arg2, long long _Accum arg3, long long _Accum arg4) { return arg4; }
unsigned short _Accum usa0 (unsigned short _Accum arg0, unsigned short _Accum arg1, unsigned short _Accum arg2, unsigned short _Accum arg3, unsigned short _Accum arg4) { return arg0; } unsigned short _Accum usa1 (unsigned short _Accum arg0, unsigned short _Accum arg1, unsigned short _Accum arg2, unsigned short _Accum arg3, unsigned short _Accum arg4) { return arg1; } unsigned short _Accum usa2 (unsigned short _Accum arg0, unsigned short _Accum arg1, unsigned short _Accum arg2, unsigned short _Accum arg3, unsigned short _Accum arg4) { return arg2; } unsigned short _Accum usa3 (unsigned short _Accum arg0, unsigned short _Accum arg1, unsigned short _Accum arg2, unsigned short _Accum arg3, unsigned short _Accum arg4) { return arg3; } unsigned short _Accum usa4 (unsigned short _Accum arg0, unsigned short _Accum arg1, unsigned short _Accum arg2, unsigned short _Accum arg3, unsigned short _Accum arg4) { return arg4; }
unsigned _Accum ua0 (unsigned _Accum arg0, unsigned _Accum arg1, unsigned _Accum arg2, unsigned _Accum arg3, unsigned _Accum arg4) { return arg0; } unsigned _Accum ua1 (unsigned _Accum arg0, unsigned _Accum arg1, unsigned _Accum arg2, unsigned _Accum arg3, unsigned _Accum arg4) { return arg1; } unsigned _Accum ua2 (unsigned _Accum arg0, unsigned _Accum arg1, unsigned _Accum arg2, unsigned _Accum arg3, unsigned _Accum arg4) { return arg2; } unsigned _Accum ua3 (unsigned _Accum arg0, unsigned _Accum arg1, unsigned _Accum arg2, unsigned _Accum arg3, unsigned _Accum arg4) { return arg3; } unsigned _Accum ua4 (unsigned _Accum arg0, unsigned _Accum arg1, unsigned _Accum arg2, unsigned _Accum arg3, unsigned _Accum arg4) { return arg4; }
unsigned long _Accum ula0 (unsigned long _Accum arg0, unsigned long _Accum arg1, unsigned long _Accum arg2, unsigned long _Accum arg3, unsigned long _Accum arg4) { return arg0; } unsigned long _Accum ula1 (unsigned long _Accum arg0, unsigned long _Accum arg1, unsigned long _Accum arg2, unsigned long _Accum arg3, unsigned long _Accum arg4) { return arg1; } unsigned long _Accum ula2 (unsigned long _Accum arg0, unsigned long _Accum arg1, unsigned long _Accum arg2, unsigned long _Accum arg3, unsigned long _Accum arg4) { return arg2; } unsigned long _Accum ula3 (unsigned long _Accum arg0, unsigned long _Accum arg1, unsigned long _Accum arg2, unsigned long _Accum arg3, unsigned long _Accum arg4) { return arg3; } unsigned long _Accum ula4 (unsigned long _Accum arg0, unsigned long _Accum arg1, unsigned long _Accum arg2, unsigned long _Accum arg3, unsigned long _Accum arg4) { return arg4; }
unsigned long long _Accum ulla0 (unsigned long long _Accum arg0, unsigned long long _Accum arg1, unsigned long long _Accum arg2, unsigned long long _Accum arg3, unsigned long long _Accum arg4) { return arg0; } unsigned long long _Accum ulla1 (unsigned long long _Accum arg0, unsigned long long _Accum arg1, unsigned long long _Accum arg2, unsigned long long _Accum arg3, unsigned long long _Accum arg4) { return arg1; } unsigned long long _Accum ulla2 (unsigned long long _Accum arg0, unsigned long long _Accum arg1, unsigned long long _Accum arg2, unsigned long long _Accum arg3, unsigned long long _Accum arg4) { return arg2; } unsigned long long _Accum ulla3 (unsigned long long _Accum arg0, unsigned long long _Accum arg1, unsigned long long _Accum arg2, unsigned long long _Accum arg3, unsigned long long _Accum arg4) { return arg3; } unsigned long long _Accum ulla4 (unsigned long long _Accum arg0, unsigned long long _Accum arg1, unsigned long long _Accum arg2, unsigned long long _Accum arg3, unsigned long long _Accum arg4) { return arg4; }
_Sat short _Accum Ssa0 (_Sat short _Accum arg0, _Sat short _Accum arg1, _Sat short _Accum arg2, _Sat short _Accum arg3, _Sat short _Accum arg4) { return arg0; } _Sat short _Accum Ssa1 (_Sat short _Accum arg0, _Sat short _Accum arg1, _Sat short _Accum arg2, _Sat short _Accum arg3, _Sat short _Accum arg4) { return arg1; } _Sat short _Accum Ssa2 (_Sat short _Accum arg0, _Sat short _Accum arg1, _Sat short _Accum arg2, _Sat short _Accum arg3, _Sat short _Accum arg4) { return arg2; } _Sat short _Accum Ssa3 (_Sat short _Accum arg0, _Sat short _Accum arg1, _Sat short _Accum arg2, _Sat short _Accum arg3, _Sat short _Accum arg4) { return arg3; } _Sat short _Accum Ssa4 (_Sat short _Accum arg0, _Sat short _Accum arg1, _Sat short _Accum arg2, _Sat short _Accum arg3, _Sat short _Accum arg4) { return arg4; }
_Sat _Accum Sa0 (_Sat _Accum arg0, _Sat _Accum arg1, _Sat _Accum arg2, _Sat _Accum arg3, _Sat _Accum arg4) { return arg0; } _Sat _Accum Sa1 (_Sat _Accum arg0, _Sat _Accum arg1, _Sat _Accum arg2, _Sat _Accum arg3, _Sat _Accum arg4) { return arg1; } _Sat _Accum Sa2 (_Sat _Accum arg0, _Sat _Accum arg1, _Sat _Accum arg2, _Sat _Accum arg3, _Sat _Accum arg4) { return arg2; } _Sat _Accum Sa3 (_Sat _Accum arg0, _Sat _Accum arg1, _Sat _Accum arg2, _Sat _Accum arg3, _Sat _Accum arg4) { return arg3; } _Sat _Accum Sa4 (_Sat _Accum arg0, _Sat _Accum arg1, _Sat _Accum arg2, _Sat _Accum arg3, _Sat _Accum arg4) { return arg4; }
_Sat long _Accum Sla0 (_Sat long _Accum arg0, _Sat long _Accum arg1, _Sat long _Accum arg2, _Sat long _Accum arg3, _Sat long _Accum arg4) { return arg0; } _Sat long _Accum Sla1 (_Sat long _Accum arg0, _Sat long _Accum arg1, _Sat long _Accum arg2, _Sat long _Accum arg3, _Sat long _Accum arg4) { return arg1; } _Sat long _Accum Sla2 (_Sat long _Accum arg0, _Sat long _Accum arg1, _Sat long _Accum arg2, _Sat long _Accum arg3, _Sat long _Accum arg4) { return arg2; } _Sat long _Accum Sla3 (_Sat long _Accum arg0, _Sat long _Accum arg1, _Sat long _Accum arg2, _Sat long _Accum arg3, _Sat long _Accum arg4) { return arg3; } _Sat long _Accum Sla4 (_Sat long _Accum arg0, _Sat long _Accum arg1, _Sat long _Accum arg2, _Sat long _Accum arg3, _Sat long _Accum arg4) { return arg4; }
_Sat long long _Accum Slla0 (_Sat long long _Accum arg0, _Sat long long _Accum arg1, _Sat long long _Accum arg2, _Sat long long _Accum arg3, _Sat long long _Accum arg4) { return arg0; } _Sat long long _Accum Slla1 (_Sat long long _Accum arg0, _Sat long long _Accum arg1, _Sat long long _Accum arg2, _Sat long long _Accum arg3, _Sat long long _Accum arg4) { return arg1; } _Sat long long _Accum Slla2 (_Sat long long _Accum arg0, _Sat long long _Accum arg1, _Sat long long _Accum arg2, _Sat long long _Accum arg3, _Sat long long _Accum arg4) { return arg2; } _Sat long long _Accum Slla3 (_Sat long long _Accum arg0, _Sat long long _Accum arg1, _Sat long long _Accum arg2, _Sat long long _Accum arg3, _Sat long long _Accum arg4) { return arg3; } _Sat long long _Accum Slla4 (_Sat long long _Accum arg0, _Sat long long _Accum arg1, _Sat long long _Accum arg2, _Sat long long _Accum arg3, _Sat long long _Accum arg4) { return arg4; }
_Sat unsigned short _Accum Susa0 (_Sat unsigned short _Accum arg0, _Sat unsigned short _Accum arg1, _Sat unsigned short _Accum arg2, _Sat unsigned short _Accum arg3, _Sat unsigned short _Accum arg4) { return arg0; } _Sat unsigned short _Accum Susa1 (_Sat unsigned short _Accum arg0, _Sat unsigned short _Accum arg1, _Sat unsigned short _Accum arg2, _Sat unsigned short _Accum arg3, _Sat unsigned short _Accum arg4) { return arg1; } _Sat unsigned short _Accum Susa2 (_Sat unsigned short _Accum arg0, _Sat unsigned short _Accum arg1, _Sat unsigned short _Accum arg2, _Sat unsigned short _Accum arg3, _Sat unsigned short _Accum arg4) { return arg2; } _Sat unsigned short _Accum Susa3 (_Sat unsigned short _Accum arg0, _Sat unsigned short _Accum arg1, _Sat unsigned short _Accum arg2, _Sat unsigned short _Accum arg3, _Sat unsigned short _Accum arg4) { return arg3; } _Sat unsigned short _Accum Susa4 (_Sat unsigned short _Accum arg0, _Sat unsigned short _Accum arg1, _Sat unsigned short _Accum arg2, _Sat unsigned short _Accum arg3, _Sat unsigned short _Accum arg4) { return arg4; }
_Sat unsigned _Accum Sua0 (_Sat unsigned _Accum arg0, _Sat unsigned _Accum arg1, _Sat unsigned _Accum arg2, _Sat unsigned _Accum arg3, _Sat unsigned _Accum arg4) { return arg0; } _Sat unsigned _Accum Sua1 (_Sat unsigned _Accum arg0, _Sat unsigned _Accum arg1, _Sat unsigned _Accum arg2, _Sat unsigned _Accum arg3, _Sat unsigned _Accum arg4) { return arg1; } _Sat unsigned _Accum Sua2 (_Sat unsigned _Accum arg0, _Sat unsigned _Accum arg1, _Sat unsigned _Accum arg2, _Sat unsigned _Accum arg3, _Sat unsigned _Accum arg4) { return arg2; } _Sat unsigned _Accum Sua3 (_Sat unsigned _Accum arg0, _Sat unsigned _Accum arg1, _Sat unsigned _Accum arg2, _Sat unsigned _Accum arg3, _Sat unsigned _Accum arg4) { return arg3; } _Sat unsigned _Accum Sua4 (_Sat unsigned _Accum arg0, _Sat unsigned _Accum arg1, _Sat unsigned _Accum arg2, _Sat unsigned _Accum arg3, _Sat unsigned _Accum arg4) { return arg4; }
_Sat unsigned long _Accum Sula0 (_Sat unsigned long _Accum arg0, _Sat unsigned long _Accum arg1, _Sat unsigned long _Accum arg2, _Sat unsigned long _Accum arg3, _Sat unsigned long _Accum arg4) { return arg0; } _Sat unsigned long _Accum Sula1 (_Sat unsigned long _Accum arg0, _Sat unsigned long _Accum arg1, _Sat unsigned long _Accum arg2, _Sat unsigned long _Accum arg3, _Sat unsigned long _Accum arg4) { return arg1; } _Sat unsigned long _Accum Sula2 (_Sat unsigned long _Accum arg0, _Sat unsigned long _Accum arg1, _Sat unsigned long _Accum arg2, _Sat unsigned long _Accum arg3, _Sat unsigned long _Accum arg4) { return arg2; } _Sat unsigned long _Accum Sula3 (_Sat unsigned long _Accum arg0, _Sat unsigned long _Accum arg1, _Sat unsigned long _Accum arg2, _Sat unsigned long _Accum arg3, _Sat unsigned long _Accum arg4) { return arg3; } _Sat unsigned long _Accum Sula4 (_Sat unsigned long _Accum arg0, _Sat unsigned long _Accum arg1, _Sat unsigned long _Accum arg2, _Sat unsigned long _Accum arg3, _Sat unsigned long _Accum arg4) { return arg4; }
_Sat unsigned long long _Accum Sulla0 (_Sat unsigned long long _Accum arg0, _Sat unsigned long long _Accum arg1, _Sat unsigned long long _Accum arg2, _Sat unsigned long long _Accum arg3, _Sat unsigned long long _Accum arg4) { return arg0; } _Sat unsigned long long _Accum Sulla1 (_Sat unsigned long long _Accum arg0, _Sat unsigned long long _Accum arg1, _Sat unsigned long long _Accum arg2, _Sat unsigned long long _Accum arg3, _Sat unsigned long long _Accum arg4) { return arg1; } _Sat unsigned long long _Accum Sulla2 (_Sat unsigned long long _Accum arg0, _Sat unsigned long long _Accum arg1, _Sat unsigned long long _Accum arg2, _Sat unsigned long long _Accum arg3, _Sat unsigned long long _Accum arg4) { return arg2; } _Sat unsigned long long _Accum Sulla3 (_Sat unsigned long long _Accum arg0, _Sat unsigned long long _Accum arg1, _Sat unsigned long long _Accum arg2, _Sat unsigned long long _Accum arg3, _Sat unsigned long long _Accum arg4) { return arg3; } _Sat unsigned long long _Accum Sulla4 (_Sat unsigned long long _Accum arg0, _Sat unsigned long long _Accum arg1, _Sat unsigned long long _Accum arg2, _Sat unsigned long long _Accum arg3, _Sat unsigned long long _Accum arg4) { return arg4; }

int main()
{
# 74 "func-scalar.c"
  { if (sf0 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.1hr) abort (); if (sf1 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.2hr) abort (); if (sf2 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.3hr) abort (); if (sf3 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.4hr) abort (); if (sf4 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.5hr) abort (); }
  { if (f0 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.1r) abort (); if (f1 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.2r) abort (); if (f2 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.3r) abort (); if (f3 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.4r) abort (); if (f4 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.5r) abort (); }
  { if (lf0 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.1lr) abort (); if (lf1 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.2lr) abort (); if (lf2 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.3lr) abort (); if (lf3 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.4lr) abort (); if (lf4 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.5lr) abort (); }
  { if (llf0 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.1llr) abort (); if (llf1 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.2llr) abort (); if (llf2 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.3llr) abort (); if (llf3 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.4llr) abort (); if (llf4 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.5llr) abort (); }
  { if (usf0 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.1uhr) abort (); if (usf1 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.2uhr) abort (); if (usf2 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.3uhr) abort (); if (usf3 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.4uhr) abort (); if (usf4 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.5uhr) abort (); }
  { if (uf0 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.1ur) abort (); if (uf1 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.2ur) abort (); if (uf2 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.3ur) abort (); if (uf3 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.4ur) abort (); if (uf4 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.5ur) abort (); }
  { if (ulf0 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.1ulr) abort (); if (ulf1 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.2ulr) abort (); if (ulf2 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.3ulr) abort (); if (ulf3 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.4ulr) abort (); if (ulf4 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.5ulr) abort (); }
  { if (ullf0 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.1ullr) abort (); if (ullf1 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.2ullr) abort (); if (ullf2 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.3ullr) abort (); if (ullf3 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.4ullr) abort (); if (ullf4 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.5ullr) abort (); }
  { if (Ssf0 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.1hr) abort (); if (Ssf1 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.2hr) abort (); if (Ssf2 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.3hr) abort (); if (Ssf3 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.4hr) abort (); if (Ssf4 (0.1hr, 0.2hr, 0.3hr, 0.4hr, 0.5hr) != 0.5hr) abort (); }
  { if (Sf0 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.1r) abort (); if (Sf1 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.2r) abort (); if (Sf2 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.3r) abort (); if (Sf3 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.4r) abort (); if (Sf4 (0.1r, 0.2r, 0.3r, 0.4r, 0.5r) != 0.5r) abort (); }
  { if (Slf0 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.1lr) abort (); if (Slf1 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.2lr) abort (); if (Slf2 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.3lr) abort (); if (Slf3 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.4lr) abort (); if (Slf4 (0.1lr, 0.2lr, 0.3lr, 0.4lr, 0.5lr) != 0.5lr) abort (); }
  { if (Sllf0 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.1llr) abort (); if (Sllf1 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.2llr) abort (); if (Sllf2 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.3llr) abort (); if (Sllf3 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.4llr) abort (); if (Sllf4 (0.1llr, 0.2llr, 0.3llr, 0.4llr, 0.5llr) != 0.5llr) abort (); }
  { if (Susf0 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.1uhr) abort (); if (Susf1 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.2uhr) abort (); if (Susf2 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.3uhr) abort (); if (Susf3 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.4uhr) abort (); if (Susf4 (0.1uhr, 0.2uhr, 0.3uhr, 0.4uhr, 0.5uhr) != 0.5uhr) abort (); }
  { if (Suf0 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.1ur) abort (); if (Suf1 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.2ur) abort (); if (Suf2 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.3ur) abort (); if (Suf3 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.4ur) abort (); if (Suf4 (0.1ur, 0.2ur, 0.3ur, 0.4ur, 0.5ur) != 0.5ur) abort (); }
  { if (Sulf0 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.1ulr) abort (); if (Sulf1 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.2ulr) abort (); if (Sulf2 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.3ulr) abort (); if (Sulf3 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.4ulr) abort (); if (Sulf4 (0.1ulr, 0.2ulr, 0.3ulr, 0.4ulr, 0.5ulr) != 0.5ulr) abort (); }
  { if (Sullf0 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.1ullr) abort (); if (Sullf1 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.2ullr) abort (); if (Sullf2 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.3ullr) abort (); if (Sullf3 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.4ullr) abort (); if (Sullf4 (0.1ullr, 0.2ullr, 0.3ullr, 0.4ullr, 0.5ullr) != 0.5ullr) abort (); }
  { if (sa0 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.1hk) abort (); if (sa1 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.2hk) abort (); if (sa2 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.3hk) abort (); if (sa3 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.4hk) abort (); if (sa4 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.5hk) abort (); }
  { if (a0 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.1k) abort (); if (a1 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.2k) abort (); if (a2 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.3k) abort (); if (a3 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.4k) abort (); if (a4 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.5k) abort (); }
  { if (la0 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.1lk) abort (); if (la1 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.2lk) abort (); if (la2 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.3lk) abort (); if (la3 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.4lk) abort (); if (la4 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.5lk) abort (); }
  { if (lla0 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.1llk) abort (); if (lla1 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.2llk) abort (); if (lla2 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.3llk) abort (); if (lla3 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.4llk) abort (); if (lla4 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.5llk) abort (); }
  { if (usa0 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.1uhk) abort (); if (usa1 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.2uhk) abort (); if (usa2 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.3uhk) abort (); if (usa3 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.4uhk) abort (); if (usa4 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.5uhk) abort (); }
  { if (ua0 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.1uk) abort (); if (ua1 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.2uk) abort (); if (ua2 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.3uk) abort (); if (ua3 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.4uk) abort (); if (ua4 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.5uk) abort (); }
  { if (ula0 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.1ulk) abort (); if (ula1 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.2ulk) abort (); if (ula2 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.3ulk) abort (); if (ula3 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.4ulk) abort (); if (ula4 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.5ulk) abort (); }
  { if (ulla0 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.1ullk) abort (); if (ulla1 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.2ullk) abort (); if (ulla2 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.3ullk) abort (); if (ulla3 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.4ullk) abort (); if (ulla4 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.5ullk) abort (); }
  { if (Ssa0 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.1hk) abort (); if (Ssa1 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.2hk) abort (); if (Ssa2 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.3hk) abort (); if (Ssa3 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.4hk) abort (); if (Ssa4 (0.1hk, 0.2hk, 0.3hk, 0.4hk, 0.5hk) != 0.5hk) abort (); }
  { if (Sa0 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.1k) abort (); if (Sa1 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.2k) abort (); if (Sa2 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.3k) abort (); if (Sa3 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.4k) abort (); if (Sa4 (0.1k, 0.2k, 0.3k, 0.4k, 0.5k) != 0.5k) abort (); }
  { if (Sla0 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.1lk) abort (); if (Sla1 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.2lk) abort (); if (Sla2 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.3lk) abort (); if (Sla3 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.4lk) abort (); if (Sla4 (0.1lk, 0.2lk, 0.3lk, 0.4lk, 0.5lk) != 0.5lk) abort (); }
  { if (Slla0 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.1llk) abort (); if (Slla1 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.2llk) abort (); if (Slla2 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.3llk) abort (); if (Slla3 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.4llk) abort (); if (Slla4 (0.1llk, 0.2llk, 0.3llk, 0.4llk, 0.5llk) != 0.5llk) abort (); }
  { if (Susa0 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.1uhk) abort (); if (Susa1 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.2uhk) abort (); if (Susa2 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.3uhk) abort (); if (Susa3 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.4uhk) abort (); if (Susa4 (0.1uhk, 0.2uhk, 0.3uhk, 0.4uhk, 0.5uhk) != 0.5uhk) abort (); }
  { if (Sua0 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.1uk) abort (); if (Sua1 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.2uk) abort (); if (Sua2 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.3uk) abort (); if (Sua3 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.4uk) abort (); if (Sua4 (0.1uk, 0.2uk, 0.3uk, 0.4uk, 0.5uk) != 0.5uk) abort (); }
  { if (Sula0 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.1ulk) abort (); if (Sula1 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.2ulk) abort (); if (Sula2 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.3ulk) abort (); if (Sula3 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.4ulk) abort (); if (Sula4 (0.1ulk, 0.2ulk, 0.3ulk, 0.4ulk, 0.5ulk) != 0.5ulk) abort (); }
  { if (Sulla0 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.1ullk) abort (); if (Sulla1 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.2ullk) abort (); if (Sulla2 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.3ullk) abort (); if (Sulla3 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.4ullk) abort (); if (Sulla4 (0.1ullk, 0.2ullk, 0.3ullk, 0.4ullk, 0.5ullk) != 0.5ullk) abort (); }

  return 0;
}
