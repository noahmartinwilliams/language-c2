# 1 "vshuf-v16hi.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "vshuf-v16hi.c"






typedef unsigned short V __attribute__((vector_size(32)));
typedef V VI;

# 1 "vshuf-16.inc" 1
# 11 "vshuf-v16hi.c" 2
# 1 "vshuf-main.inc" 1


extern void abort (void);


V a, b, c, d;
# 28 "vshuf-main.inc"
__attribute__((noinline, noclone)) void test_0 (void) { VI mask = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_1 (void) { VI mask = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_2 (void) { VI mask = { 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_3 (void) { VI mask = { 0, 18, 7, 16, 23, 5, 4, 22, 1, 6, 21, 20, 19, 3, 17, 2 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_4 (void) { VI mask = { 0, 1, 2, 3, 4, 5, 6, 7, 7, 1, 2, 0, 4, 5, 6, 3 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_5 (void) { VI mask = { 0, 19, 16, 3, 2, 17, 18, 1, 24, 8, 11, 10, 27, 26, 25, 9 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_6 (void) { VI mask = { 4, 23, 20, 7, 6, 21, 22, 5, 28, 12, 15, 14, 31, 30, 29, 13 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_7 (void) { VI mask = { 7, 1, 2, 0, 4, 5, 6, 3, 7, 1, 2, 0, 4, 5, 6, 3 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_8 (void) { VI mask = { 7, 3, 0, 5, 4, 1, 6, 2, 31, 27, 24, 29, 28, 25, 30, 26 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_9 (void) { VI mask = { 7, 1, 2, 0, 4, 5, 6, 3, 15, 9, 14, 10, 8, 12, 13, 11 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_10 (void) { VI mask = { 15, 0, 3, 12, 14, 2, 1, 13, 4, 11, 9, 6, 5, 10, 7, 8 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_11 (void) { VI mask = { 15, 9, 14, 10, 8, 12, 13, 11, 7, 1, 2, 0, 4, 5, 6, 3 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_12 (void) { VI mask = { 2, 5, 24, 23, 17, 22, 20, 21, 12, 14, 13, 8, 6, 20, 10, 18 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_13 (void) { VI mask = { 23, 11, 15, 9, 0, 14, 8, 12, 10, 13, 19, 11, 2, 26, 24, 30 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_14 (void) { VI mask = { 25, 5, 17, 1, 9, 15, 21, 7, 28, 2, 18, 13, 30, 14, 10, 4 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_15 (void) { VI mask = { 1, 30, 27, 31, 9, 18, 25, 12, 7, 4, 2, 16, 25, 20, 10, 3 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_16 (void) { VI mask = { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_17 (void) { VI mask = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_18 (void) { VI mask = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_19 (void) { VI mask = { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_20 (void) { VI mask = { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_21 (void) { VI mask = { 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_22 (void) { VI mask = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_23 (void) { VI mask = { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 15 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_24 (void) { VI mask = { 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_25 (void) { VI mask = { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 16; ++i) if (c[i] != a[mask[i] & (16 - 1)]) abort (); else if ((mask[i] & 16)) { if (d[i] != b[mask[i] & (16 - 1)]) abort (); } else if (d[i] != a[mask[i] & (16 - 1)]) abort (); }





int
main ()
{

  int i;
  for (i = 0; i < 16; ++i)
    {
      a[i] = i + 2;
      b[i] = 16 + i + 2;
    }




  test_0 (); test_1 (); test_2 (); test_3 (); test_4 (); test_5 (); test_6 (); test_7 (); test_8 (); test_9 (); test_10 (); test_11 (); test_12 (); test_13 (); test_14 (); test_15 (); test_16 (); test_17 (); test_18 (); test_19 (); test_20 (); test_21 (); test_22 (); test_23 (); test_24 (); test_25 ();





  return 0;
}
# 11 "vshuf-v16hi.c" 2
