Failed to parse c11-atomic-exec-1.c
with message:
Syntax error !The symbol `_Bool' does not fit here. ("c11-atomic-exec-1.c": line 54)
/* No Input */
Working dir: /home/noah/src/package-sources/language-c/test/harness/parse_dg
Preprocessed input follows:

# 1 "c11-atomic-exec-1.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "c11-atomic-exec-1.c"





extern void abort (void);
extern void exit (int);
extern int memcmp (const void *, const void *, unsigned int);
# 51 "c11-atomic-exec-1.c"
static void
test_simple_assign (void)
{
  do { do { static volatile _Atomic (_Bool) a, b = (_Bool) ((0)); if (a != 0) abort (); if (b != ((_Bool) ((0)))) abort (); if ((a = b) != ((_Bool) ((0)))) abort (); if (a != ((_Bool) ((0)))) abort (); } while (0); do { static volatile _Atomic (char) a, b = (char) ((0)); if (a != 0) abort (); if (b != ((char) ((0)))) abort (); if ((a = b) != ((char) ((0)))) abort (); if (a != ((char) ((0)))) abort (); } while (0); do { static volatile _Atomic (signed char) a, b = (signed char) ((0)); if (a != 0) abort (); if (b != ((signed char) ((0)))) abort (); if ((a = b) != ((signed char) ((0)))) abort (); if (a != ((signed char) ((0)))) abort (); } while (0); do { static volatile _Atomic (unsigned char) a, b = (unsigned char) ((0)); if (a != 0) abort (); if (b != ((unsigned char) ((0)))) abort (); if ((a = b) != ((unsigned char) ((0)))) abort (); if (a != ((unsigned char) ((0)))) abort (); } while (0); do { static volatile _Atomic (signed short) a, b = (signed short) ((0)); if (a != 0) abort (); if (b != ((signed short) ((0)))) abort (); if ((a = b) != ((signed short) ((0)))) abort (); if (a != ((signed short) ((0)))) abort (); } while (0); do { static volatile _Atomic (unsigned short) a, b = (unsigned short) ((0)); if (a != 0) abort (); if (b != ((unsigned short) ((0)))) abort (); if ((a = b) != ((unsigned short) ((0)))) abort (); if (a != ((unsigned short) ((0)))) abort (); } while (0); do { static volatile _Atomic (signed int) a, b = (signed int) ((0)); if (a != 0) abort (); if (b != ((signed int) ((0)))) abort (); if ((a = b) != ((signed int) ((0)))) abort (); if (a != ((signed int) ((0)))) abort (); } while (0); do { static volatile _Atomic (unsigned int) a, b = (unsigned int) ((0)); if (a != 0) abort (); if (b != ((unsigned int) ((0)))) abort (); if ((a = b) != ((unsigned int) ((0)))) abort (); if (a != ((unsigned int) ((0)))) abort (); } while (0); do { static volatile _Atomic (signed long) a, b = (signed long) ((0)); if (a != 0) abort (); if (b != ((signed long) ((0)))) abort (); if ((a = b) != ((signed long) ((0)))) abort (); if (a != ((signed long) ((0)))) abort (); } while (0); do { static volatile _Atomic (unsigned long) a, b = (unsigned long) ((0)); if (a != 0) abort (); if (b != ((unsigned long) ((0)))) abort (); if ((a = b) != ((unsigned long) ((0)))) abort (); if (a != ((unsigned long) ((0)))) abort (); } while (0); do { static volatile _Atomic (signed long long) a, b = (signed long long) ((0)); if (a != 0) abort (); if (b != ((signed long long) ((0)))) abort (); if ((a = b) != ((signed long long) ((0)))) abort (); if (a != ((signed long long) ((0)))) abort (); } while (0); do { static volatile _Atomic (unsigned long long) a, b = (unsigned long long) ((0)); if (a != 0) abort (); if (b != ((unsigned long long) ((0)))) abort (); if ((a = b) != ((unsigned long long) ((0)))) abort (); if (a != ((unsigned long long) ((0)))) abort (); } while (0); do { static volatile _Atomic (float) a, b = (float) ((0)); if (a != 0) abort (); if (b != ((float) ((0)))) abort (); if ((a = b) != ((float) ((0)))) abort (); if (a != ((float) ((0)))) abort (); } while (0); do { static volatile _Atomic (double) a, b = (double) ((0)); if (a != 0) abort (); if (b != ((double) ((0)))) abort (); if ((a = b) != ((double) ((0)))) abort (); if (a != ((double) ((0)))) abort (); } while (0); do { static volatile _Atomic (long double) a, b = (long double) ((0)); if (a != 0) abort (); if (b != ((long double) ((0)))) abort (); if ((a = b) != ((long double) ((0)))) abort (); if (a != ((long double) ((0)))) abort (); } while (0); do { static volatile _Atomic (_Complex float) a, b = (_Complex float) ((0)); if (a != 0) abort (); if (b != ((_Complex float) ((0)))) abort (); if ((a = b) != ((_Complex float) ((0)))) abort (); if (a != ((_Complex float) ((0)))) abort (); } while (0); do { static volatile _Atomic (_Complex double) a, b = (_Complex double) ((0)); if (a != 0) abort (); if (b != ((_Complex double) ((0)))) abort (); if ((a = b) != ((_Complex double) ((0)))) abort (); if (a != ((_Complex double) ((0)))) abort (); } while (0); do { static volatile _Atomic (_Complex long double) a, b = (_Complex long double) ((0)); if (a != 0) abort (); if (b != ((_Complex long double) ((0)))) abort (); if ((a = b) != ((_Complex long double) ((0)))) abort (); if (a != ((_Complex long double) ((0)))) abort (); } while (0); } while (0);
  do { do { static volatile _Atomic (_Bool) a, b = (_Bool) ((1)); if (a != 0) abort (); if (b != ((_Bool) ((1)))) abort (); if ((a = b) != ((_Bool) ((1)))) abort (); if (a != ((_Bool) ((1)))) abort (); } while (0); do { static volatile _Atomic (char) a, b = (char) ((1)); if (a != 0) abort (); if (b != ((char) ((1)))) abort (); if ((a = b) != ((char) ((1)))) abort (); if (a != ((char) ((1)))) abort (); } while (0); do { static volatile _Atomic (signed char) a, b = (signed char) ((1)); if (a != 0) abort (); if (b != ((signed char) ((1)))) abort (); if ((a = b) != ((signed char) ((1)))) abort (); if (a != ((signed char) ((1)))) abort (); } while (0); do { static volatile _Atomic (unsigned char) a, b = (unsigned char) ((1)); if (a != 0) abort (); if (b != ((unsigned char) ((1)))) abort (); if ((a = b) != ((unsigned char) ((1)))) abort (); if (a != ((unsigned char) ((1)))) abort (); } while (0); do { static volatile _Atomic (signed short) a, b = (signed short) ((1)); if (a != 0) abort (); if (b != ((signed short) ((1)))) abort (); if ((a = b) != ((signed short) ((1)))) abort (); if (a != ((signed short) ((1)))) abort (); } while (0); do { static volatile _Atomic (unsigned short) a, b = (unsigned short) ((1)); if (a != 0) abort (); if (b != ((unsigned short) ((1)))) abort (); if ((a = b) != ((unsigned short) ((1)))) abort (); if (a != ((unsigned short) ((1)))) abort (); } while (0); do { static volatile _Atomic (signed int) a, b = (signed int) ((1)); if (a != 0) abort (); if (b != ((signed int) ((1)))) abort (); if ((a = b) != ((signed int) ((1)))) abort (); if (a != ((signed int) ((1)))) abort (); } while (0); do { static volatile _Atomic (unsigned int) a, b = (unsigned int) ((1)); if (a != 0) abort (); if (b != ((unsigned int) ((1)))) abort (); if ((a = b) != ((unsigned int) ((1)))) abort (); if (a != ((unsigned int) ((1)))) abort (); } while (0); do { static volatile _Atomic (signed long) a, b = (signed long) ((1)); if (a != 0) abort (); if (b != ((signed long) ((1)))) abort (); if ((a = b) != ((signed long) ((1)))) abort (); if (a != ((signed long) ((1)))) abort (); } while (0); do { static volatile _Atomic (unsigned long) a, b = (unsigned long) ((1)); if (a != 0) abort (); if (b != ((unsigned long) ((1)))) abort (); if ((a = b) != ((unsigned long) ((1)))) abort (); if (a != ((unsigned long) ((1)))) abort (); } while (0); do { static volatile _Atomic (signed long long) a, b = (signed long long) ((1)); if (a != 0) abort (); if (b != ((signed long long) ((1)))) abort (); if ((a = b) != ((signed long long) ((1)))) abort (); if (a != ((signed long long) ((1)))) abort (); } while (0); do { static volatile _Atomic (unsigned long long) a, b = (unsigned long long) ((1)); if (a != 0) abort (); if (b != ((unsigned long long) ((1)))) abort (); if ((a = b) != ((unsigned long long) ((1)))) abort (); if (a != ((unsigned long long) ((1)))) abort (); } while (0); do { static volatile _Atomic (float) a, b = (float) ((1)); if (a != 0) abort (); if (b != ((float) ((1)))) abort (); if ((a = b) != ((float) ((1)))) abort (); if (a != ((float) ((1)))) abort (); } while (0); do { static volatile _Atomic (double) a, b = (double) ((1)); if (a != 0) abort (); if (b != ((double) ((1)))) abort (); if ((a = b) != ((double) ((1)))) abort (); if (a != ((double) ((1)))) abort (); } while (0); do { static volatile _Atomic (long double) a, b = (long double) ((1)); if (a != 0) abort (); if (b != ((long double) ((1)))) abort (); if ((a = b) != ((long double) ((1)))) abort (); if (a != ((long double) ((1)))) abort (); } while (0); do { static volatile _Atomic (_Complex float) a, b = (_Complex float) ((1)); if (a != 0) abort (); if (b != ((_Complex float) ((1)))) abort (); if ((a = b) != ((_Complex float) ((1)))) abort (); if (a != ((_Complex float) ((1)))) abort (); } while (0); do { static volatile _Atomic (_Complex double) a, b = (_Complex double) ((1)); if (a != 0) abort (); if (b != ((_Complex double) ((1)))) abort (); if ((a = b) != ((_Complex double) ((1)))) abort (); if (a != ((_Complex double) ((1)))) abort (); } while (0); do { static volatile _Atomic (_Complex long double) a, b = (_Complex long double) ((1)); if (a != 0) abort (); if (b != ((_Complex long double) ((1)))) abort (); if ((a = b) != ((_Complex long double) ((1)))) abort (); if (a != ((_Complex long double) ((1)))) abort (); } while (0); } while (0);
  do { do { static volatile _Atomic (_Bool) a, b = (_Bool) ((2)); if (a != 0) abort (); if (b != ((_Bool) ((2)))) abort (); if ((a = b) != ((_Bool) ((2)))) abort (); if (a != ((_Bool) ((2)))) abort (); } while (0); do { static volatile _Atomic (char) a, b = (char) ((2)); if (a != 0) abort (); if (b != ((char) ((2)))) abort (); if ((a = b) != ((char) ((2)))) abort (); if (a != ((char) ((2)))) abort (); } while (0); do { static volatile _Atomic (signed char) a, b = (signed char) ((2)); if (a != 0) abort (); if (b != ((signed char) ((2)))) abort (); if ((a = b) != ((signed char) ((2)))) abort (); if (a != ((signed char) ((2)))) abort (); } while (0); do { static volatile _Atomic (unsigned char) a, b = (unsigned char) ((2)); if (a != 0) abort (); if (b != ((unsigned char) ((2)))) abort (); if ((a = b) != ((unsigned char) ((2)))) abort (); if (a != ((unsigned char) ((2)))) abort (); } while (0); do { static volatile _Atomic (signed short) a, b = (signed short) ((2)); if (a != 0) abort (); if (b != ((signed short) ((2)))) abort (); if ((a = b) != ((signed short) ((2)))) abort (); if (a != ((signed short) ((2)))) abort (); } while (0); do { static volatile _Atomic (unsigned short) a, b = (unsigned short) ((2)); if (a != 0) abort (); if (b != ((unsigned short) ((2)))) abort (); if ((a = b) != ((unsigned short) ((2)))) abort (); if (a != ((unsigned short) ((2)))) abort (); } while (0); do { static volatile _Atomic (signed int) a, b = (signed int) ((2)); if (a != 0) abort (); if (b != ((signed int) ((2)))) abort (); if ((a = b) != ((signed int) ((2)))) abort (); if (a != ((signed int) ((2)))) abort (); } while (0); do { static volatile _Atomic (unsigned int) a, b = (unsigned int) ((2)); if (a != 0) abort (); if (b != ((unsigned int) ((2)))) abort (); if ((a = b) != ((unsigned int) ((2)))) abort (); if (a != ((unsigned int) ((2)))) abort (); } while (0); do { static volatile _Atomic (signed long) a, b = (signed long) ((2)); if (a != 0) abort (); if (b != ((signed long) ((2)))) abort (); if ((a = b) != ((signed long) ((2)))) abort (); if (a != ((signed long) ((2)))) abort (); } while (0); do { static volatile _Atomic (unsigned long) a, b = (unsigned long) ((2)); if (a != 0) abort (); if (b != ((unsigned long) ((2)))) abort (); if ((a = b) != ((unsigned long) ((2)))) abort (); if (a != ((unsigned long) ((2)))) abort (); } while (0); do { static volatile _Atomic (signed long long) a, b = (signed long long) ((2)); if (a != 0) abort (); if (b != ((signed long long) ((2)))) abort (); if ((a = b) != ((signed long long) ((2)))) abort (); if (a != ((signed long long) ((2)))) abort (); } while (0); do { static volatile _Atomic (unsigned long long) a, b = (unsigned long long) ((2)); if (a != 0) abort (); if (b != ((unsigned long long) ((2)))) abort (); if ((a = b) != ((unsigned long long) ((2)))) abort (); if (a != ((unsigned long long) ((2)))) abort (); } while (0); do { static volatile _Atomic (float) a, b = (float) ((2)); if (a != 0) abort (); if (b != ((float) ((2)))) abort (); if ((a = b) != ((float) ((2)))) abort (); if (a != ((float) ((2)))) abort (); } while (0); do { static volatile _Atomic (double) a, b = (double) ((2)); if (a != 0) abort (); if (b != ((double) ((2)))) abort (); if ((a = b) != ((double) ((2)))) abort (); if (a != ((double) ((2)))) abort (); } while (0); do { static volatile _Atomic (long double) a, b = (long double) ((2)); if (a != 0) abort (); if (b != ((long double) ((2)))) abort (); if ((a = b) != ((long double) ((2)))) abort (); if (a != ((long double) ((2)))) abort (); } while (0); do { static volatile _Atomic (_Complex float) a, b = (_Complex float) ((2)); if (a != 0) abort (); if (b != ((_Complex float) ((2)))) abort (); if ((a = b) != ((_Complex float) ((2)))) abort (); if (a != ((_Complex float) ((2)))) abort (); } while (0); do { static volatile _Atomic (_Complex double) a, b = (_Complex double) ((2)); if (a != 0) abort (); if (b != ((_Complex double) ((2)))) abort (); if ((a = b) != ((_Complex double) ((2)))) abort (); if (a != ((_Complex double) ((2)))) abort (); } while (0); do { static volatile _Atomic (_Complex long double) a, b = (_Complex long double) ((2)); if (a != 0) abort (); if (b != ((_Complex long double) ((2)))) abort (); if ((a = b) != ((_Complex long double) ((2)))) abort (); if (a != ((_Complex long double) ((2)))) abort (); } while (0); } while (0);
  do { do { static volatile _Atomic (_Bool) a, b = (_Bool) ((-1)); if (a != 0) abort (); if (b != ((_Bool) ((-1)))) abort (); if ((a = b) != ((_Bool) ((-1)))) abort (); if (a != ((_Bool) ((-1)))) abort (); } while (0); do { static volatile _Atomic (char) a, b = (char) ((-1)); if (a != 0) abort (); if (b != ((char) ((-1)))) abort (); if ((a = b) != ((char) ((-1)))) abort (); if (a != ((char) ((-1)))) abort (); } while (0); do { static volatile _Atomic (signed char) a, b = (signed char) ((-1)); if (a != 0) abort (); if (b != ((signed char) ((-1)))) abort (); if ((a = b) != ((signed char) ((-1)))) abort (); if (a != ((signed char) ((-1)))) abort (); } while (0); do { static volatile _Atomic (unsigned char) a, b = (unsigned char) ((-1)); if (a != 0) abort (); if (b != ((unsigned char) ((-1)))) abort (); if ((a = b) != ((unsigned char) ((-1)))) abort (); if (a != ((unsigned char) ((-1)))) abort (); } while (0); do { static volatile _Atomic (signed short) a, b = (signed short) ((-1)); if (a != 0) abort (); if (b != ((signed short) ((-1)))) abort (); if ((a = b) != ((signed short) ((-1)))) abort (); if (a != ((signed short) ((-1)))) abort (); } while (0); do { static volatile _Atomic (unsigned short) a, b = (unsigned short) ((-1)); if (a != 0) abort (); if (b != ((unsigned short) ((-1)))) abort (); if ((a = b) != ((unsigned short) ((-1)))) abort (); if (a != ((unsigned short) ((-1)))) abort (); } while (0); do { static volatile _Atomic (signed int) a, b = (signed int) ((-1)); if (a != 0) abort (); if (b != ((signed int) ((-1)))) abort (); if ((a = b) != ((signed int) ((-1)))) abort (); if (a != ((signed int) ((-1)))) abort (); } while (0); do { static volatile _Atomic (unsigned int) a, b = (unsigned int) ((-1)); if (a != 0) abort (); if (b != ((unsigned int) ((-1)))) abort (); if ((a = b) != ((unsigned int) ((-1)))) abort (); if (a != ((unsigned int) ((-1)))) abort (); } while (0); do { static volatile _Atomic (signed long) a, b = (signed long) ((-1)); if (a != 0) abort (); if (b != ((signed long) ((-1)))) abort (); if ((a = b) != ((signed long) ((-1)))) abort (); if (a != ((signed long) ((-1)))) abort (); } while (0); do { static volatile _Atomic (unsigned long) a, b = (unsigned long) ((-1)); if (a != 0) abort (); if (b != ((unsigned long) ((-1)))) abort (); if ((a = b) != ((unsigned long) ((-1)))) abort (); if (a != ((unsigned long) ((-1)))) abort (); } while (0); do { static volatile _Atomic (signed long long) a, b = (signed long long) ((-1)); if (a != 0) abort (); if (b != ((signed long long) ((-1)))) abort (); if ((a = b) != ((signed long long) ((-1)))) abort (); if (a != ((signed long long) ((-1)))) abort (); } while (0); do { static volatile _Atomic (unsigned long long) a, b = (unsigned long long) ((-1)); if (a != 0) abort (); if (b != ((unsigned long long) ((-1)))) abort (); if ((a = b) != ((unsigned long long) ((-1)))) abort (); if (a != ((unsigned long long) ((-1)))) abort (); } while (0); do { static volatile _Atomic (float) a, b = (float) ((-1)); if (a != 0) abort (); if (b != ((float) ((-1)))) abort (); if ((a = b) != ((float) ((-1)))) abort (); if (a != ((float) ((-1)))) abort (); } while (0); do { static volatile _Atomic (double) a, b = (double) ((-1)); if (a != 0) abort (); if (b != ((double) ((-1)))) abort (); if ((a = b) != ((double) ((-1)))) abort (); if (a != ((double) ((-1)))) abort (); } while (0); do { static volatile _Atomic (long double) a, b = (long double) ((-1)); if (a != 0) abort (); if (b != ((long double) ((-1)))) abort (); if ((a = b) != ((long double) ((-1)))) abort (); if (a != ((long double) ((-1)))) abort (); } while (0); do { static volatile _Atomic (_Complex float) a, b = (_Complex float) ((-1)); if (a != 0) abort (); if (b != ((_Complex float) ((-1)))) abort (); if ((a = b) != ((_Complex float) ((-1)))) abort (); if (a != ((_Complex float) ((-1)))) abort (); } while (0); do { static volatile _Atomic (_Complex double) a, b = (_Complex double) ((-1)); if (a != 0) abort (); if (b != ((_Complex double) ((-1)))) abort (); if ((a = b) != ((_Complex double) ((-1)))) abort (); if (a != ((_Complex double) ((-1)))) abort (); } while (0); do { static volatile _Atomic (_Complex long double) a, b = (_Complex long double) ((-1)); if (a != 0) abort (); if (b != ((_Complex long double) ((-1)))) abort (); if ((a = b) != ((_Complex long double) ((-1)))) abort (); if (a != ((_Complex long double) ((-1)))) abort (); } while (0); } while (0);
  do { do { static volatile _Atomic (_Bool) a, b = (_Bool) ((1ULL << 63)); if (a != 0) abort (); if (b != ((_Bool) ((1ULL << 63)))) abort (); if ((a = b) != ((_Bool) ((1ULL << 63)))) abort (); if (a != ((_Bool) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (char) a, b = (char) ((1ULL << 63)); if (a != 0) abort (); if (b != ((char) ((1ULL << 63)))) abort (); if ((a = b) != ((char) ((1ULL << 63)))) abort (); if (a != ((char) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (signed char) a, b = (signed char) ((1ULL << 63)); if (a != 0) abort (); if (b != ((signed char) ((1ULL << 63)))) abort (); if ((a = b) != ((signed char) ((1ULL << 63)))) abort (); if (a != ((signed char) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (unsigned char) a, b = (unsigned char) ((1ULL << 63)); if (a != 0) abort (); if (b != ((unsigned char) ((1ULL << 63)))) abort (); if ((a = b) != ((unsigned char) ((1ULL << 63)))) abort (); if (a != ((unsigned char) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (signed short) a, b = (signed short) ((1ULL << 63)); if (a != 0) abort (); if (b != ((signed short) ((1ULL << 63)))) abort (); if ((a = b) != ((signed short) ((1ULL << 63)))) abort (); if (a != ((signed short) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (unsigned short) a, b = (unsigned short) ((1ULL << 63)); if (a != 0) abort (); if (b != ((unsigned short) ((1ULL << 63)))) abort (); if ((a = b) != ((unsigned short) ((1ULL << 63)))) abort (); if (a != ((unsigned short) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (signed int) a, b = (signed int) ((1ULL << 63)); if (a != 0) abort (); if (b != ((signed int) ((1ULL << 63)))) abort (); if ((a = b) != ((signed int) ((1ULL << 63)))) abort (); if (a != ((signed int) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (unsigned int) a, b = (unsigned int) ((1ULL << 63)); if (a != 0) abort (); if (b != ((unsigned int) ((1ULL << 63)))) abort (); if ((a = b) != ((unsigned int) ((1ULL << 63)))) abort (); if (a != ((unsigned int) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (signed long) a, b = (signed long) ((1ULL << 63)); if (a != 0) abort (); if (b != ((signed long) ((1ULL << 63)))) abort (); if ((a = b) != ((signed long) ((1ULL << 63)))) abort (); if (a != ((signed long) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (unsigned long) a, b = (unsigned long) ((1ULL << 63)); if (a != 0) abort (); if (b != ((unsigned long) ((1ULL << 63)))) abort (); if ((a = b) != ((unsigned long) ((1ULL << 63)))) abort (); if (a != ((unsigned long) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (signed long long) a, b = (signed long long) ((1ULL << 63)); if (a != 0) abort (); if (b != ((signed long long) ((1ULL << 63)))) abort (); if ((a = b) != ((signed long long) ((1ULL << 63)))) abort (); if (a != ((signed long long) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (unsigned long long) a, b = (unsigned long long) ((1ULL << 63)); if (a != 0) abort (); if (b != ((unsigned long long) ((1ULL << 63)))) abort (); if ((a = b) != ((unsigned long long) ((1ULL << 63)))) abort (); if (a != ((unsigned long long) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (float) a, b = (float) ((1ULL << 63)); if (a != 0) abort (); if (b != ((float) ((1ULL << 63)))) abort (); if ((a = b) != ((float) ((1ULL << 63)))) abort (); if (a != ((float) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (double) a, b = (double) ((1ULL << 63)); if (a != 0) abort (); if (b != ((double) ((1ULL << 63)))) abort (); if ((a = b) != ((double) ((1ULL << 63)))) abort (); if (a != ((double) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (long double) a, b = (long double) ((1ULL << 63)); if (a != 0) abort (); if (b != ((long double) ((1ULL << 63)))) abort (); if ((a = b) != ((long double) ((1ULL << 63)))) abort (); if (a != ((long double) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (_Complex float) a, b = (_Complex float) ((1ULL << 63)); if (a != 0) abort (); if (b != ((_Complex float) ((1ULL << 63)))) abort (); if ((a = b) != ((_Complex float) ((1ULL << 63)))) abort (); if (a != ((_Complex float) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (_Complex double) a, b = (_Complex double) ((1ULL << 63)); if (a != 0) abort (); if (b != ((_Complex double) ((1ULL << 63)))) abort (); if ((a = b) != ((_Complex double) ((1ULL << 63)))) abort (); if (a != ((_Complex double) ((1ULL << 63)))) abort (); } while (0); do { static volatile _Atomic (_Complex long double) a, b = (_Complex long double) ((1ULL << 63)); if (a != 0) abort (); if (b != ((_Complex long double) ((1ULL << 63)))) abort (); if ((a = b) != ((_Complex long double) ((1ULL << 63)))) abort (); if (a != ((_Complex long double) ((1ULL << 63)))) abort (); } while (0); } while (0);
  do { do { static volatile _Atomic (_Bool) a, b = (_Bool) ((1.5)); if (a != 0) abort (); if (b != ((_Bool) ((1.5)))) abort (); if ((a = b) != ((_Bool) ((1.5)))) abort (); if (a != ((_Bool) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (char) a, b = (char) ((1.5)); if (a != 0) abort (); if (b != ((char) ((1.5)))) abort (); if ((a = b) != ((char) ((1.5)))) abort (); if (a != ((char) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (signed char) a, b = (signed char) ((1.5)); if (a != 0) abort (); if (b != ((signed char) ((1.5)))) abort (); if ((a = b) != ((signed char) ((1.5)))) abort (); if (a != ((signed char) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (unsigned char) a, b = (unsigned char) ((1.5)); if (a != 0) abort (); if (b != ((unsigned char) ((1.5)))) abort (); if ((a = b) != ((unsigned char) ((1.5)))) abort (); if (a != ((unsigned char) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (signed short) a, b = (signed short) ((1.5)); if (a != 0) abort (); if (b != ((signed short) ((1.5)))) abort (); if ((a = b) != ((signed short) ((1.5)))) abort (); if (a != ((signed short) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (unsigned short) a, b = (unsigned short) ((1.5)); if (a != 0) abort (); if (b != ((unsigned short) ((1.5)))) abort (); if ((a = b) != ((unsigned short) ((1.5)))) abort (); if (a != ((unsigned short) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (signed int) a, b = (signed int) ((1.5)); if (a != 0) abort (); if (b != ((signed int) ((1.5)))) abort (); if ((a = b) != ((signed int) ((1.5)))) abort (); if (a != ((signed int) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (unsigned int) a, b = (unsigned int) ((1.5)); if (a != 0) abort (); if (b != ((unsigned int) ((1.5)))) abort (); if ((a = b) != ((unsigned int) ((1.5)))) abort (); if (a != ((unsigned int) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (signed long) a, b = (signed long) ((1.5)); if (a != 0) abort (); if (b != ((signed long) ((1.5)))) abort (); if ((a = b) != ((signed long) ((1.5)))) abort (); if (a != ((signed long) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (unsigned long) a, b = (unsigned long) ((1.5)); if (a != 0) abort (); if (b != ((unsigned long) ((1.5)))) abort (); if ((a = b) != ((unsigned long) ((1.5)))) abort (); if (a != ((unsigned long) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (signed long long) a, b = (signed long long) ((1.5)); if (a != 0) abort (); if (b != ((signed long long) ((1.5)))) abort (); if ((a = b) != ((signed long long) ((1.5)))) abort (); if (a != ((signed long long) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (unsigned long long) a, b = (unsigned long long) ((1.5)); if (a != 0) abort (); if (b != ((unsigned long long) ((1.5)))) abort (); if ((a = b) != ((unsigned long long) ((1.5)))) abort (); if (a != ((unsigned long long) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (float) a, b = (float) ((1.5)); if (a != 0) abort (); if (b != ((float) ((1.5)))) abort (); if ((a = b) != ((float) ((1.5)))) abort (); if (a != ((float) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (double) a, b = (double) ((1.5)); if (a != 0) abort (); if (b != ((double) ((1.5)))) abort (); if ((a = b) != ((double) ((1.5)))) abort (); if (a != ((double) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (long double) a, b = (long double) ((1.5)); if (a != 0) abort (); if (b != ((long double) ((1.5)))) abort (); if ((a = b) != ((long double) ((1.5)))) abort (); if (a != ((long double) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (_Complex float) a, b = (_Complex float) ((1.5)); if (a != 0) abort (); if (b != ((_Complex float) ((1.5)))) abort (); if ((a = b) != ((_Complex float) ((1.5)))) abort (); if (a != ((_Complex float) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (_Complex double) a, b = (_Complex double) ((1.5)); if (a != 0) abort (); if (b != ((_Complex double) ((1.5)))) abort (); if ((a = b) != ((_Complex double) ((1.5)))) abort (); if (a != ((_Complex double) ((1.5)))) abort (); } while (0); do { static volatile _Atomic (_Complex long double) a, b = (_Complex long double) ((1.5)); if (a != 0) abort (); if (b != ((_Complex long double) ((1.5)))) abort (); if ((a = b) != ((_Complex long double) ((1.5)))) abort (); if (a != ((_Complex long double) ((1.5)))) abort (); } while (0); } while (0);
  do { do { static volatile _Atomic (_Bool) a, b = (_Bool) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((_Bool) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((_Bool) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((_Bool) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (char) a, b = (char) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((char) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((char) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((char) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (signed char) a, b = (signed char) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((signed char) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((signed char) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((signed char) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (unsigned char) a, b = (unsigned char) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((unsigned char) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((unsigned char) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((unsigned char) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (signed short) a, b = (signed short) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((signed short) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((signed short) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((signed short) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (unsigned short) a, b = (unsigned short) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((unsigned short) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((unsigned short) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((unsigned short) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (signed int) a, b = (signed int) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((signed int) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((signed int) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((signed int) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (unsigned int) a, b = (unsigned int) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((unsigned int) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((unsigned int) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((unsigned int) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (signed long) a, b = (signed long) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((signed long) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((signed long) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((signed long) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (unsigned long) a, b = (unsigned long) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((unsigned long) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((unsigned long) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((unsigned long) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (signed long long) a, b = (signed long long) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((signed long long) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((signed long long) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((signed long long) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (unsigned long long) a, b = (unsigned long long) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((unsigned long long) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((unsigned long long) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((unsigned long long) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (float) a, b = (float) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((float) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((float) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((float) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (double) a, b = (double) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((double) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((double) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((double) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (long double) a, b = (long double) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((long double) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((long double) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((long double) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (_Complex float) a, b = (_Complex float) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((_Complex float) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((_Complex float) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((_Complex float) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (_Complex double) a, b = (_Complex double) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((_Complex double) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((_Complex double) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((_Complex double) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); do { static volatile _Atomic (_Complex long double) a, b = (_Complex long double) ((__builtin_complex ((2.5), (3.5)))); if (a != 0) abort (); if (b != ((_Complex long double) ((__builtin_complex ((2.5), (3.5)))))) abort (); if ((a = b) != ((_Complex long double) ((__builtin_complex ((2.5), (3.5)))))) abort (); if (a != ((_Complex long double) ((__builtin_complex ((2.5), (3.5)))))) abort (); } while (0); } while (0);
  static int i;
  do { static volatile _Atomic (int *) a, b = (int *) (0); if (a != 0) abort (); if (b != ((int *) (0))) abort (); if ((a = b) != ((int *) (0))) abort (); if (a != ((int *) (0))) abort (); } while (0);
  do { static volatile _Atomic (int *) a, b = (int *) (&i); if (a != 0) abort (); if (b != ((int *) (&i))) abort (); if ((a = b) != ((int *) (&i))) abort (); if (a != ((int *) (&i))) abort (); } while (0);
  struct s { short a[1024]; };
  struct s init, copy;
  _Atomic struct s s1, s2;
  for (int j = 0; j < 1024; j++)
    init.a[j] = j;
  copy = (s1 = init);
  if (memcmp (&init, &copy, sizeof init) != 0)
    abort ();
  copy = (s2 = s1);
  if (memcmp (&init, &copy, sizeof init) != 0)
    abort ();
  copy = s1;
  if (memcmp (&init, &copy, sizeof init) != 0)
    abort ();
  copy = s2;
  if (memcmp (&init, &copy, sizeof init) != 0)
    abort ();
}

int
main (void)
{
  test_simple_assign ();
  exit (0);
}
