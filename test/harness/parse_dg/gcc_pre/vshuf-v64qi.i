# 1 "vshuf-v64qi.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "vshuf-v64qi.c"






typedef unsigned char V __attribute__((vector_size(64)));
typedef V VI;

# 1 "vshuf-64.inc" 1
# 11 "vshuf-v64qi.c" 2
# 1 "vshuf-main.inc" 1


extern void abort (void);


V a, b, c, d;
# 28 "vshuf-main.inc"
__attribute__((noinline, noclone)) void test_0 (void) { VI mask = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_1 (void) { VI mask = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_2 (void) { VI mask = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_3 (void) { VI mask = { 8, 72, 9, 73, 10, 74, 11, 75, 12, 76, 13, 77, 14, 78, 15, 79, 24, 88, 25, 89, 26, 90, 27, 91, 28, 92, 29, 93, 30, 94, 31, 95, 40, 104, 41, 105, 42, 106, 43, 107, 44, 108, 45, 109, 46, 110, 47, 111, 56, 120, 57, 121, 58, 122, 59, 123, 60, 124, 61, 125, 62, 126, 63, 127 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_4 (void) { VI mask = { 0, 64, 1, 65, 2, 66, 3, 67, 4, 68, 5, 69, 6, 70, 7, 71, 16, 80, 17, 81, 18, 82, 19, 83, 20, 84, 21, 85, 22, 86, 23, 87, 32, 96, 33, 97, 34, 98, 35, 99, 36, 100, 37, 101, 38, 102, 39, 103, 48, 112, 49, 113, 50, 114, 51, 115, 52, 116, 53, 117, 54, 118, 55, 119 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_5 (void) { VI mask = { 43, 13, 25, 48, 6, 19, 60, 36, 15, 20, 13, 51, 13, 4, 18, 25, 56, 29, 39, 52, 43, 38, 61, 8, 20, 24, 63, 18, 26, 24, 43, 5, 37, 4, 53, 43, 23, 49, 15, 39, 6, 28, 26, 19, 33, 45, 44, 25, 10, 19, 14, 53, 58, 11, 61, 14, 35, 60, 33, 61, 20, 12, 2, 58 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_6 (void) { VI mask = { 17, 55, 37, 40, 41, 53, 15, 47, 17, 42, 2, 50, 23, 46, 12, 33, 1, 26, 22, 59, 37, 20, 10, 8, 16, 43, 5, 37, 55, 7, 31, 8, 62, 4, 49, 39, 57, 0, 22, 11, 42, 24, 61, 1, 6, 9, 34, 8, 35, 57, 3, 8, 13, 13, 16, 29, 56, 21, 2, 48, 28, 33, 56, 27 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_7 (void) { VI mask = { 38, 41, 2, 31, 42, 25, 42, 20, 49, 40, 22, 56, 49, 56, 0, 21, 49, 3, 29, 62, 17, 46, 28, 9, 3, 30, 57, 32, 50, 59, 38, 27, 61, 5, 5, 22, 48, 26, 8, 24, 48, 9, 40, 30, 26, 3, 60, 24, 20, 42, 52, 30, 45, 19, 23, 13, 19, 9, 8, 57, 37, 6, 62, 42 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_8 (void) { VI mask = { 28, 46, 4, 36, 6, 52, 36, 16, 29, 36, 46, 55, 40, 42, 15, 60, 20, 4, 26, 2, 23, 50, 15, 42, 59, 24, 35, 32, 30, 33, 11, 58, 16, 15, 31, 22, 4, 3, 38, 33, 40, 21, 24, 16, 63, 39, 12, 20, 43, 39, 22, 2, 25, 37, 44, 20, 61, 15, 53, 27, 49, 0, 22, 1 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_9 (void) { VI mask = { 15, 53, 23, 19, 56, 62, 52, 32, 19, 12, 48, 18, 52, 61, 38, 31, 36, 60, 34, 61, 34, 14, 17, 31, 30, 6, 59, 15, 6, 17, 16, 22, 6, 39, 41, 62, 37, 30, 31, 56, 42, 15, 11, 30, 12, 49, 62, 48, 46, 32, 45, 16, 46, 63, 47, 12, 5, 42, 27, 12, 59, 43, 34, 1 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_10 (void) { VI mask = { 19, 11, 56, 41, 31, 49, 20, 46, 60, 50, 59, 45, 48, 43, 27, 16, 25, 43, 63, 24, 27, 11, 29, 5, 39, 41, 18, 11, 2, 37, 23, 2, 30, 33, 15, 20, 16, 11, 7, 11, 56, 55, 54, 20, 8, 15, 63, 7, 39, 26, 18, 5, 32, 57, 46, 33, 12, 58, 35, 49, 17, 38, 15, 17 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_11 (void) { VI mask = { 7, 30, 38, 23, 41, 45, 34, 34, 36, 25, 54, 44, 40, 53, 51, 16, 16, 6, 21, 48, 63, 3, 17, 11, 61, 52, 61, 14, 26, 12, 32, 34, 43, 6, 57, 20, 51, 28, 54, 23, 53, 44, 4, 29, 34, 55, 45, 50, 61, 2, 34, 61, 6, 51, 8, 3, 39, 5, 18, 2, 18, 50, 36, 61 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_12 (void) { VI mask = { 56, 29, 17, 43, 57, 8, 2, 46, 52, 6, 12, 22, 62, 57, 8, 59, 60, 42, 56, 2, 29, 5, 5, 6, 23, 7, 24, 9, 43, 21, 8, 39, 44, 2, 47, 47, 48, 35, 53, 60, 58, 51, 2, 47, 50, 45, 39, 52, 10, 40, 57, 15, 47, 17, 22, 7, 26, 29, 28, 10, 4, 8, 12, 51 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_13 (void) { VI mask = { 55, 60, 22, 45, 57, 16, 32, 47, 19, 15, 33, 55, 21, 10, 31, 14, 26, 14, 31, 48, 22, 58, 50, 51, 22, 60, 55, 30, 8, 42, 22, 4, 0, 3, 61, 17, 35, 44, 36, 51, 13, 36, 42, 34, 46, 9, 49, 8, 24, 16, 57, 46, 10, 43, 33, 32, 39, 24, 63, 47, 2, 21, 51, 2 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_14 (void) { VI mask = { 24, 49, 19, 59, 29, 55, 46, 43, 27, 24, 13, 10, 34, 62, 18, 58, 15, 11, 40, 25, 9, 58, 29, 33, 57, 12, 35, 14, 0, 37, 38, 49, 57, 33, 14, 48, 16, 57, 12, 40, 7, 22, 10, 5, 40, 4, 20, 52, 44, 46, 42, 53, 40, 8, 22, 33, 20, 57, 47, 20, 31, 21, 5, 24 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_15 (void) { VI mask = { 54, 20, 8, 6, 13, 20, 47, 20, 42, 57, 26, 19, 62, 46, 7, 42, 28, 49, 32, 4, 57, 37, 14, 48, 20, 34, 15, 41, 40, 39, 32, 60, 47, 38, 9, 4, 21, 30, 46, 15, 56, 1, 13, 38, 8, 55, 3, 58, 23, 7, 51, 14, 45, 62, 36, 13, 43, 12, 52, 11, 8, 35, 49, 17 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_16 (void) { VI mask = { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_17 (void) { VI mask = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_18 (void) { VI mask = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_19 (void) { VI mask = { 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_20 (void) { VI mask = { 0, 64, 1, 65, 2, 66, 3, 67, 4, 68, 5, 69, 6, 70, 7, 71, 8, 72, 9, 73, 10, 74, 11, 75, 12, 76, 13, 77, 14, 78, 15, 79, 16, 80, 17, 81, 18, 82, 19, 83, 20, 84, 21, 85, 22, 86, 23, 87, 24, 88, 25, 89, 26, 90, 27, 91, 28, 92, 29, 93, 30, 94, 31, 95 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_21 (void) { VI mask = { 32, 96, 33, 97, 34, 98, 35, 99, 36, 100, 37, 101, 38, 102, 39, 103, 40, 104, 41, 105, 42, 106, 43, 107, 44, 108, 45, 109, 46, 110, 47, 111, 48, 112, 49, 113, 50, 114, 51, 115, 52, 116, 53, 117, 54, 118, 55, 119, 56, 120, 57, 121, 58, 122, 59, 123, 60, 124, 61, 125, 62, 126, 63, 127 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_22 (void) { VI mask = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_23 (void) { VI mask = { 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 63 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); } __attribute__((noinline, noclone)) void test_24 (void) { VI mask = { 0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62 }; int i; c = __builtin_shuffle (a, mask); d = __builtin_shuffle (a, b, mask); __asm ("" : : "r" (&c), "r" (&d) : "memory"); for (i = 0; i < 64; ++i) if (c[i] != a[mask[i] & (64 - 1)]) abort (); else if ((mask[i] & 64)) { if (d[i] != b[mask[i] & (64 - 1)]) abort (); } else if (d[i] != a[mask[i] & (64 - 1)]) abort (); }





int
main ()
{

  int i;
  for (i = 0; i < 64; ++i)
    {
      a[i] = i + 2;
      b[i] = 64 + i + 2;
    }




  test_0 (); test_1 (); test_2 (); test_3 (); test_4 (); test_5 (); test_6 (); test_7 (); test_8 (); test_9 (); test_10 (); test_11 (); test_12 (); test_13 (); test_14 (); test_15 (); test_16 (); test_17 (); test_18 (); test_19 (); test_20 (); test_21 (); test_22 (); test_23 (); test_24 ();





  return 0;
}
# 11 "vshuf-v64qi.c" 2
